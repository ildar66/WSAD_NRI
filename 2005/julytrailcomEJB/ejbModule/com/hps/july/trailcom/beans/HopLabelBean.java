package com.hps.july.trailcom.beans;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Данные TRAILCOM - метки пролетов
 */
public class HopLabelBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	public int hopslabelid;
	public String hopsname;
	public String hopsnamecomments;
	private final static long serialVersionUID = 3206093459760846163L;
	public java.lang.Integer hopid_hopsid;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink hopidLink = null;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("hopsnamecomments", getHopsnamecomments());
        h.put("hopidKey", getHopidKey());
        h.put("hopsname", getHopsname());
        h.put("hopslabelid", new Integer(getHopslabelid()));
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.lang.String localHopsnamecomments = (java.lang.String) h.get("hopsnamecomments");
        java.lang.String localHopsname = (java.lang.String) h.get("hopsname");

        if ( h.containsKey("hopsnamecomments") )
            setHopsnamecomments((localHopsnamecomments));
        if ( h.containsKey("hopsname") )
            setHopsname((localHopsname));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getHopidLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	hopidLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argHopslabelid int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argHopslabelid) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	hopslabelid = argHopslabelid;

	hopsname = null;
	hopsnamecomments = null;
	hopid_hopsid = null;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argHopslabelid int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argHopslabelid) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * This method was generated for supporting the association named HopLabel2Hop.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.trailcom.beans.Hop getHopid() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.trailcom.beans.Hop)this.getHopidLink().value();
}
/**
 * This method was generated for supporting the association named HopLabel2Hop.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.trailcom.beans.HopKey getHopidKey() {
	com.hps.july.trailcom.beans.HopKey temp = null;
	temp = new com.hps.july.trailcom.beans.HopKey();
	boolean hopid_NULLTEST = true;
	hopid_NULLTEST &= (hopid_hopsid == null);
	temp.hopsid = ((hopid_hopsid == null) ? 0 : hopid_hopsid.intValue());
	if (hopid_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named HopLabel2Hop.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getHopidLink() {
	if (hopidLink == null)
		hopidLink = new HopLabelToHopidLink(this);
	return hopidLink;
}
/**
 * Insert the method's description here.
 * Creation date: (10.09.2003 17:28:02)
 * @return int
 */
public int getHopslabelid() {
	return hopslabelid;
}
/**
 * Getter method for hopsname
 * @return java.lang.String
 */
public java.lang.String getHopsname() {
	return hopsname;
}
/**
 * Getter method for hopsnamecomments
 * @return java.lang.String
 */
public java.lang.String getHopsnamecomments() {
	return hopsnamecomments;
}
/**
 * This method was generated for supporting the association named HopLabel2Hop.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetHopidKey(com.hps.july.trailcom.beans.HopKey inKey) {
	boolean hopid_NULLTEST = (inKey == null);
	if (hopid_NULLTEST) hopid_hopsid = null; else hopid_hopsid = (new Integer(inKey.hopsid));
}
/**
 * This method was generated for supporting the association named HopLabel2Hop.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetHopid(com.hps.july.trailcom.beans.Hop aHopid) throws java.rmi.RemoteException {
	this.getHopidLink().secondarySet(aHopid);
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * This method was generated for supporting the association named HopLabel2Hop.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setHopid(com.hps.july.trailcom.beans.Hop aHopid) throws java.rmi.RemoteException {
	this.getHopidLink().set(aHopid);
}
/**
 * Setter method for hopsname
 * @param newValue java.lang.String
 */
public void setHopsname(java.lang.String newValue) {
	this.hopsname = newValue;
}
/**
 * Setter method for hopsnamecomments
 * @param newValue java.lang.String
 */
public void setHopsnamecomments(java.lang.String newValue) {
	this.hopsnamecomments = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
