// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.hps.july.arenda.sessionbean;

import java.io.Serializable;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import java.sql.Date;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ServantObject;

public class _ArendaDocumentProcessor_Stub extends Stub implements ArendaDocumentProcessor {
    
    private static final String[] _type_ids = {
        "RMI:com.hps.july.arenda.sessionbean.ArendaDocumentProcessor:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000"
    };
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public EJBHome getEJBHome() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_EJBHome", true);
                    in = _invoke(out);
                    return (EJBHome) in.read_Object(EJBHome.class);
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getEJBHome();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_EJBHome",javax.ejb.EJBObject.class);
            if (so == null) {
                return getEJBHome();
            }
            try {
                EJBHome result = ((javax.ejb.EJBObject)so.servant).getEJBHome();
                return (EJBHome)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Handle getHandle() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_handle", true);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Handle) in.read_abstract_interface(Handle.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getHandle();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_handle",javax.ejb.EJBObject.class);
            if (so == null) {
                return getHandle();
            }
            try {
                Handle result = ((javax.ejb.EJBObject)so.servant).getHandle();
                return (Handle)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object getPrimaryKey() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_primaryKey", true);
                    in = _invoke(out);
                    return Util.readAny(in);
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getPrimaryKey();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_primaryKey",javax.ejb.EJBObject.class);
            if (so == null) {
                return getPrimaryKey();
            }
            try {
                Object result = ((javax.ejb.EJBObject)so.servant).getPrimaryKey();
                return (Object)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean isIdentical(EJBObject arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("isIdentical", true);
                    Util.writeRemoteObject(out,arg0);
                    in = _invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return isIdentical(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("isIdentical",javax.ejb.EJBObject.class);
            if (so == null) {
                return isIdentical(arg0);
            }
            try {
                EJBObject arg0Copy = (EJBObject) Util.copyObject(arg0,_orb());
                return ((javax.ejb.EJBObject)so.servant).isIdentical(arg0Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void remove() throws RemoteException, RemoveException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("remove", true);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:javax/ejb/RemoveEx:1.0")) {
                        throw (RemoveException) in.read_value(RemoveException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    remove();
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("remove",javax.ejb.EJBObject.class);
            if (so == null) {
                remove();
                return;
            }
            try {
                ((javax.ejb.EJBObject)so.servant).remove();
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof RemoveException) {
                    throw (RemoveException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object[] delShfOnAkt(int arg0, int arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("delShfOnAkt", true);
                    out.write_long(arg0);
                    out.write_long(arg1);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Object[]) in.read_value(Object[].class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return delShfOnAkt(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("delShfOnAkt",com.hps.july.arenda.sessionbean.ArendaDocumentProcessor.class);
            if (so == null) {
                return delShfOnAkt(arg0, arg1);
            }
            try {
                Object[] result = ((com.hps.july.arenda.sessionbean.ArendaDocumentProcessor)so.servant).delShfOnAkt(arg0, arg1);
                return (Object[])Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public String getActNumber(int arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("getActNumber", true);
                    out.write_long(arg0);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (String) in.read_value(String.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getActNumber(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getActNumber",com.hps.july.arenda.sessionbean.ArendaDocumentProcessor.class);
            if (so == null) {
                return getActNumber(arg0);
            }
            try {
                return ((com.hps.july.arenda.sessionbean.ArendaDocumentProcessor)so.servant).getActNumber(arg0);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public int getDefaultBudjet(int arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("getDefaultBudjet", true);
                    out.write_long(arg0);
                    in = _invoke(out);
                    return in.read_long();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getDefaultBudjet(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getDefaultBudjet",com.hps.july.arenda.sessionbean.ArendaDocumentProcessor.class);
            if (so == null) {
                return getDefaultBudjet(arg0);
            }
            try {
                return ((com.hps.july.arenda.sessionbean.ArendaDocumentProcessor)so.servant).getDefaultBudjet(arg0);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public int getDefaultExpence(int arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("getDefaultExpence", true);
                    out.write_long(arg0);
                    in = _invoke(out);
                    return in.read_long();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getDefaultExpence(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getDefaultExpence",com.hps.july.arenda.sessionbean.ArendaDocumentProcessor.class);
            if (so == null) {
                return getDefaultExpence(arg0);
            }
            try {
                return ((com.hps.july.arenda.sessionbean.ArendaDocumentProcessor)so.servant).getDefaultExpence(arg0);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public int makeAutomaticCharges(Date arg0, Integer arg1, Integer arg2, Integer arg3) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("makeAutomaticCharges", true);
                    out.write_value(arg0,Date.class);
                    out.write_value(arg1,Integer.class);
                    out.write_value(arg2,Integer.class);
                    out.write_value(arg3,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_long();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return makeAutomaticCharges(arg0,arg1,arg2,arg3);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("makeAutomaticCharges",com.hps.july.arenda.sessionbean.ArendaDocumentProcessor.class);
            if (so == null) {
                return makeAutomaticCharges(arg0, arg1, arg2, arg3);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3},_orb());
                Date arg0Copy = (Date) copies[0];
                Integer arg1Copy = (Integer) copies[1];
                Integer arg2Copy = (Integer) copies[2];
                Integer arg3Copy = (Integer) copies[3];
                return ((com.hps.july.arenda.sessionbean.ArendaDocumentProcessor)so.servant).makeAutomaticCharges(arg0Copy, arg1Copy, arg2Copy, arg3Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public int makeAutomaticPayments(Date arg0, Date arg1, Integer arg2, Integer arg3, Integer arg4) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("makeAutomaticPayments", true);
                    out.write_value(arg0,Date.class);
                    out.write_value(arg1,Date.class);
                    out.write_value(arg2,Integer.class);
                    out.write_value(arg3,Integer.class);
                    out.write_value(arg4,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_long();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return makeAutomaticPayments(arg0,arg1,arg2,arg3,arg4);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("makeAutomaticPayments",com.hps.july.arenda.sessionbean.ArendaDocumentProcessor.class);
            if (so == null) {
                return makeAutomaticPayments(arg0, arg1, arg2, arg3, arg4);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4},_orb());
                Date arg0Copy = (Date) copies[0];
                Date arg1Copy = (Date) copies[1];
                Integer arg2Copy = (Integer) copies[2];
                Integer arg3Copy = (Integer) copies[3];
                Integer arg4Copy = (Integer) copies[4];
                return ((com.hps.july.arenda.sessionbean.ArendaDocumentProcessor)so.servant).makeAutomaticPayments(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public int makeCalcForReport(int arg0, int arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("makeCalcForReport", true);
                    out.write_long(arg0);
                    out.write_long(arg1);
                    in = _invoke(out);
                    return in.read_long();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return makeCalcForReport(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("makeCalcForReport",com.hps.july.arenda.sessionbean.ArendaDocumentProcessor.class);
            if (so == null) {
                return makeCalcForReport(arg0, arg1);
            }
            try {
                return ((com.hps.july.arenda.sessionbean.ArendaDocumentProcessor)so.servant).makeCalcForReport(arg0, arg1);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public int makeQryGetPays(int arg0, Integer arg1, Integer arg2, Date arg3, Date arg4) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("makeQryGetPays", true);
                    out.write_long(arg0);
                    out.write_value(arg1,Integer.class);
                    out.write_value(arg2,Integer.class);
                    out.write_value(arg3,Date.class);
                    out.write_value(arg4,Date.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_long();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return makeQryGetPays(arg0,arg1,arg2,arg3,arg4);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("makeQryGetPays",com.hps.july.arenda.sessionbean.ArendaDocumentProcessor.class);
            if (so == null) {
                return makeQryGetPays(arg0, arg1, arg2, arg3, arg4);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg1,arg2,arg3,arg4},_orb());
                Integer arg1Copy = (Integer) copies[0];
                Integer arg2Copy = (Integer) copies[1];
                Date arg3Copy = (Date) copies[2];
                Date arg4Copy = (Date) copies[3];
                return ((com.hps.july.arenda.sessionbean.ArendaDocumentProcessor)so.servant).makeQryGetPays(arg0, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object[] makeSchfOnAkt(int arg0, int arg1, int arg2) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("makeSchfOnAkt", true);
                    out.write_long(arg0);
                    out.write_long(arg1);
                    out.write_long(arg2);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Object[]) in.read_value(Object[].class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return makeSchfOnAkt(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("makeSchfOnAkt",com.hps.july.arenda.sessionbean.ArendaDocumentProcessor.class);
            if (so == null) {
                return makeSchfOnAkt(arg0, arg1, arg2);
            }
            try {
                Object[] result = ((com.hps.july.arenda.sessionbean.ArendaDocumentProcessor)so.servant).makeSchfOnAkt(arg0, arg1, arg2);
                return (Object[])Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public int moveBanToBilling(int arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("moveBanToBilling", true);
                    out.write_long(arg0);
                    in = _invoke(out);
                    return in.read_long();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return moveBanToBilling(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("moveBanToBilling",com.hps.july.arenda.sessionbean.ArendaDocumentProcessor.class);
            if (so == null) {
                return moveBanToBilling(arg0);
            }
            try {
                return ((com.hps.july.arenda.sessionbean.ArendaDocumentProcessor)so.servant).moveBanToBilling(arg0);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object[] moveContractToPie(int arg0, String arg1, String arg2) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("moveContractToPie", true);
                    out.write_long(arg0);
                    out.write_value(arg1,String.class);
                    out.write_value(arg2,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Object[]) in.read_value(Object[].class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return moveContractToPie(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("moveContractToPie",com.hps.july.arenda.sessionbean.ArendaDocumentProcessor.class);
            if (so == null) {
                return moveContractToPie(arg0, arg1, arg2);
            }
            try {
                Object[] result = ((com.hps.july.arenda.sessionbean.ArendaDocumentProcessor)so.servant).moveContractToPie(arg0, arg1, arg2);
                return (Object[])Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object[] movePayToPie(int arg0, String arg1, String arg2) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("movePayToPie", true);
                    out.write_long(arg0);
                    out.write_value(arg1,String.class);
                    out.write_value(arg2,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Object[]) in.read_value(Object[].class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return movePayToPie(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("movePayToPie",com.hps.july.arenda.sessionbean.ArendaDocumentProcessor.class);
            if (so == null) {
                return movePayToPie(arg0, arg1, arg2);
            }
            try {
                Object[] result = ((com.hps.july.arenda.sessionbean.ArendaDocumentProcessor)so.servant).movePayToPie(arg0, arg1, arg2);
                return (Object[])Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object[] prepareShetFact(int arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("prepareShetFact__long", true);
                    out.write_long(arg0);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Object[]) in.read_value(Object[].class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return prepareShetFact(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("prepareShetFact__long",com.hps.july.arenda.sessionbean.ArendaDocumentProcessor.class);
            if (so == null) {
                return prepareShetFact(arg0);
            }
            try {
                Object[] result = ((com.hps.july.arenda.sessionbean.ArendaDocumentProcessor)so.servant).prepareShetFact(arg0);
                return (Object[])Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object[] prepareShetFact(int arg0, Integer arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("prepareShetFact__long__java_lang_Integer", true);
                    out.write_long(arg0);
                    out.write_value(arg1,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Object[]) in.read_value(Object[].class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return prepareShetFact(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("prepareShetFact__long__java_lang_Integer",com.hps.july.arenda.sessionbean.ArendaDocumentProcessor.class);
            if (so == null) {
                return prepareShetFact(arg0, arg1);
            }
            try {
                Integer arg1Copy = (Integer) Util.copyObject(arg1,_orb());
                Object[] result = ((com.hps.july.arenda.sessionbean.ArendaDocumentProcessor)so.servant).prepareShetFact(arg0, arg1Copy);
                return (Object[])Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public int prolongLeaseArendaAgreement(Date arg0, Date arg1, Integer arg2, Integer arg3, Integer arg4) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("prolongLeaseArendaAgreement", true);
                    out.write_value(arg0,Date.class);
                    out.write_value(arg1,Date.class);
                    out.write_value(arg2,Integer.class);
                    out.write_value(arg3,Integer.class);
                    out.write_value(arg4,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_long();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return prolongLeaseArendaAgreement(arg0,arg1,arg2,arg3,arg4);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("prolongLeaseArendaAgreement",com.hps.july.arenda.sessionbean.ArendaDocumentProcessor.class);
            if (so == null) {
                return prolongLeaseArendaAgreement(arg0, arg1, arg2, arg3, arg4);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4},_orb());
                Date arg0Copy = (Date) copies[0];
                Date arg1Copy = (Date) copies[1];
                Integer arg2Copy = (Integer) copies[2];
                Integer arg3Copy = (Integer) copies[3];
                Integer arg4Copy = (Integer) copies[4];
                return ((com.hps.july.arenda.sessionbean.ArendaDocumentProcessor)so.servant).prolongLeaseArendaAgreement(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
}
