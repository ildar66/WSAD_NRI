// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.hps.july.arenda.sessionbean;

import java.io.Serializable;
import java.math.BigDecimal;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import java.util.Date;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ServantObject;

public class _ArendaTransactionMethod_Stub extends Stub implements ArendaTransactionMethod {
    
    private static final String[] _type_ids = {
        "RMI:com.hps.july.arenda.sessionbean.ArendaTransactionMethod:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000"
    };
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public EJBHome getEJBHome() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_EJBHome", true);
                    in = _invoke(out);
                    return (EJBHome) in.read_Object(EJBHome.class);
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getEJBHome();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_EJBHome",javax.ejb.EJBObject.class);
            if (so == null) {
                return getEJBHome();
            }
            try {
                EJBHome result = ((javax.ejb.EJBObject)so.servant).getEJBHome();
                return (EJBHome)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Handle getHandle() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_handle", true);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Handle) in.read_abstract_interface(Handle.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getHandle();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_handle",javax.ejb.EJBObject.class);
            if (so == null) {
                return getHandle();
            }
            try {
                Handle result = ((javax.ejb.EJBObject)so.servant).getHandle();
                return (Handle)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object getPrimaryKey() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_primaryKey", true);
                    in = _invoke(out);
                    return Util.readAny(in);
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getPrimaryKey();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_primaryKey",javax.ejb.EJBObject.class);
            if (so == null) {
                return getPrimaryKey();
            }
            try {
                Object result = ((javax.ejb.EJBObject)so.servant).getPrimaryKey();
                return (Object)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean isIdentical(EJBObject arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("isIdentical", true);
                    Util.writeRemoteObject(out,arg0);
                    in = _invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return isIdentical(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("isIdentical",javax.ejb.EJBObject.class);
            if (so == null) {
                return isIdentical(arg0);
            }
            try {
                EJBObject arg0Copy = (EJBObject) Util.copyObject(arg0,_orb());
                return ((javax.ejb.EJBObject)so.servant).isIdentical(arg0Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void remove() throws RemoteException, RemoveException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("remove", true);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:javax/ejb/RemoveEx:1.0")) {
                        throw (RemoveException) in.read_value(RemoveException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    remove();
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("remove",javax.ejb.EJBObject.class);
            if (so == null) {
                remove();
                return;
            }
            try {
                ((javax.ejb.EJBObject)so.servant).remove();
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof RemoveException) {
                    throw (RemoveException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean _addMutuallyBetweenContract(Integer arg0, Integer arg1, BigDecimal arg2) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("J_addMutuallyBetweenContract", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Integer.class);
                    out.write_value(arg2,BigDecimal.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return _addMutuallyBetweenContract(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("J_addMutuallyBetweenContract",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return _addMutuallyBetweenContract(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Integer arg1Copy = (Integer) copies[1];
                BigDecimal arg2Copy = (BigDecimal) copies[2];
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant)._addMutuallyBetweenContract(arg0Copy, arg1Copy, arg2Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean _addToLeaseSaldo(Integer arg0, Integer arg1, BigDecimal arg2, BigDecimal arg3, BigDecimal arg4, BigDecimal arg5) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("J_addToLeaseSaldo", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Integer.class);
                    out.write_value(arg2,BigDecimal.class);
                    out.write_value(arg3,BigDecimal.class);
                    out.write_value(arg4,BigDecimal.class);
                    out.write_value(arg5,BigDecimal.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return _addToLeaseSaldo(arg0,arg1,arg2,arg3,arg4,arg5);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("J_addToLeaseSaldo",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return _addToLeaseSaldo(arg0, arg1, arg2, arg3, arg4, arg5);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4,arg5},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Integer arg1Copy = (Integer) copies[1];
                BigDecimal arg2Copy = (BigDecimal) copies[2];
                BigDecimal arg3Copy = (BigDecimal) copies[3];
                BigDecimal arg4Copy = (BigDecimal) copies[4];
                BigDecimal arg5Copy = (BigDecimal) copies[5];
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant)._addToLeaseSaldo(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy, arg5Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean _linkCharge2Pay(Handle arg0, Handle arg1, BigDecimal arg2, Integer arg3, Boolean arg4, String arg5, int arg6) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("J_linkCharge2Pay", true);
                    Util.writeAbstractObject(out,arg0);
                    Util.writeAbstractObject(out,arg1);
                    out.write_value(arg2,BigDecimal.class);
                    out.write_value(arg3,Integer.class);
                    out.write_value(arg4,Boolean.class);
                    out.write_value(arg5,String.class);
                    out.write_long(arg6);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return _linkCharge2Pay(arg0,arg1,arg2,arg3,arg4,arg5,arg6);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("J_linkCharge2Pay",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return _linkCharge2Pay(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4,arg5},_orb());
                Handle arg0Copy = (Handle) copies[0];
                Handle arg1Copy = (Handle) copies[1];
                BigDecimal arg2Copy = (BigDecimal) copies[2];
                Integer arg3Copy = (Integer) copies[3];
                Boolean arg4Copy = (Boolean) copies[4];
                String arg5Copy = (String) copies[5];
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant)._linkCharge2Pay(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy, arg5Copy, arg6);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Integer _makeCompensationCharge(Handle arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("J_makeCompensationCharge", true);
                    Util.writeAbstractObject(out,arg0);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Integer) in.read_value(Integer.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return _makeCompensationCharge(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("J_makeCompensationCharge",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return _makeCompensationCharge(arg0);
            }
            try {
                Handle arg0Copy = (Handle) Util.copyObject(arg0,_orb());
                Integer result = ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant)._makeCompensationCharge(arg0Copy);
                return (Integer)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Integer _makeCompensationPayment(Handle arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("J_makeCompensationPayment", true);
                    Util.writeAbstractObject(out,arg0);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Integer) in.read_value(Integer.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return _makeCompensationPayment(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("J_makeCompensationPayment",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return _makeCompensationPayment(arg0);
            }
            try {
                Handle arg0Copy = (Handle) Util.copyObject(arg0,_orb());
                Integer result = ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant)._makeCompensationPayment(arg0Copy);
                return (Integer)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Integer _makeMutualCharge(Handle arg0, BigDecimal arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("J_makeMutualCharge", true);
                    Util.writeAbstractObject(out,arg0);
                    out.write_value(arg1,BigDecimal.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Integer) in.read_value(Integer.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return _makeMutualCharge(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("J_makeMutualCharge",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return _makeMutualCharge(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Handle arg0Copy = (Handle) copies[0];
                BigDecimal arg1Copy = (BigDecimal) copies[1];
                Integer result = ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant)._makeMutualCharge(arg0Copy, arg1Copy);
                return (Integer)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Integer _makeMutualPayment(Handle arg0, BigDecimal arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("J_makeMutualPayment", true);
                    Util.writeAbstractObject(out,arg0);
                    out.write_value(arg1,BigDecimal.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Integer) in.read_value(Integer.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return _makeMutualPayment(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("J_makeMutualPayment",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return _makeMutualPayment(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Handle arg0Copy = (Handle) copies[0];
                BigDecimal arg1Copy = (BigDecimal) copies[1];
                Integer result = ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant)._makeMutualPayment(arg0Copy, arg1Copy);
                return (Integer)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean _makeSaldoCharge(Handle arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("J_makeSaldoCharge", true);
                    Util.writeAbstractObject(out,arg0);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return _makeSaldoCharge(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("J_makeSaldoCharge",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return _makeSaldoCharge(arg0);
            }
            try {
                Handle arg0Copy = (Handle) Util.copyObject(arg0,_orb());
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant)._makeSaldoCharge(arg0Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean _makeSaldoPayment(Handle arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("J_makeSaldoPayment", true);
                    Util.writeAbstractObject(out,arg0);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return _makeSaldoPayment(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("J_makeSaldoPayment",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return _makeSaldoPayment(arg0);
            }
            try {
                Handle arg0Copy = (Handle) Util.copyObject(arg0,_orb());
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant)._makeSaldoPayment(arg0Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void _newCalcRate(int arg0, int arg1, BigDecimal arg2) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("J_newCalcRate", true);
                    out.write_long(arg0);
                    out.write_long(arg1);
                    out.write_value(arg2,BigDecimal.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    _newCalcRate(arg0,arg1,arg2);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("J_newCalcRate",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                _newCalcRate(arg0, arg1, arg2);
                return;
            }
            try {
                BigDecimal arg2Copy = (BigDecimal) Util.copyObject(arg2,_orb());
                ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant)._newCalcRate(arg0, arg1, arg2Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean _setLeaseChargesRemainderRate(Handle arg0, BigDecimal arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("J_setLeaseChargesRemainderRate", true);
                    Util.writeAbstractObject(out,arg0);
                    out.write_value(arg1,BigDecimal.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return _setLeaseChargesRemainderRate(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("J_setLeaseChargesRemainderRate",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return _setLeaseChargesRemainderRate(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Handle arg0Copy = (Handle) copies[0];
                BigDecimal arg1Copy = (BigDecimal) copies[1];
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant)._setLeaseChargesRemainderRate(arg0Copy, arg1Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean _setLeaseDnopChargeRURSum(Handle arg0, BigDecimal arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("J_setLeaseDnopChargeRURSum", true);
                    Util.writeAbstractObject(out,arg0);
                    out.write_value(arg1,BigDecimal.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return _setLeaseDnopChargeRURSum(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("J_setLeaseDnopChargeRURSum",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return _setLeaseDnopChargeRURSum(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Handle arg0Copy = (Handle) copies[0];
                BigDecimal arg1Copy = (BigDecimal) copies[1];
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant)._setLeaseDnopChargeRURSum(arg0Copy, arg1Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public BigDecimal calcNds(Integer arg0, Date arg1, BigDecimal arg2, String arg3, int arg4) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("calcNds", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Date.class);
                    out.write_value(arg2,BigDecimal.class);
                    out.write_value(arg3,String.class);
                    out.write_long(arg4);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (BigDecimal) in.read_value(BigDecimal.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return calcNds(arg0,arg1,arg2,arg3,arg4);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("calcNds",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return calcNds(arg0, arg1, arg2, arg3, arg4);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Date arg1Copy = (Date) copies[1];
                BigDecimal arg2Copy = (BigDecimal) copies[2];
                String arg3Copy = (String) copies[3];
                BigDecimal result = ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).calcNds(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4);
                return (BigDecimal)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean clearCharge2Pay(Handle arg0, int arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("clearCharge2Pay", true);
                    Util.writeAbstractObject(out,arg0);
                    out.write_long(arg1);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return clearCharge2Pay(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("clearCharge2Pay",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return clearCharge2Pay(arg0, arg1);
            }
            try {
                Handle arg0Copy = (Handle) Util.copyObject(arg0,_orb());
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).clearCharge2Pay(arg0Copy, arg1);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean clearCharge2PayOnAktLink(Integer arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("clearCharge2PayOnAktLink", true);
                    out.write_value(arg0,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return clearCharge2PayOnAktLink(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("clearCharge2PayOnAktLink",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return clearCharge2PayOnAktLink(arg0);
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).clearCharge2PayOnAktLink(arg0Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean clearLeasevpayment() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("clearLeasevpayment", true);
                    in = _invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return clearLeasevpayment();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("clearLeasevpayment",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return clearLeasevpayment();
            }
            try {
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).clearLeasevpayment();
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean createChargeOrPaymentOnSaldo(Integer arg0, Date arg1, Integer arg2) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("createChargeOrPaymentOnSaldo", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Date.class);
                    out.write_value(arg2,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return createChargeOrPaymentOnSaldo(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("createChargeOrPaymentOnSaldo",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return createChargeOrPaymentOnSaldo(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Date arg1Copy = (Date) copies[1];
                Integer arg2Copy = (Integer) copies[2];
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).createChargeOrPaymentOnSaldo(arg0Copy, arg1Copy, arg2Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean createSaldo(Integer arg0, Date arg1, Integer arg2, Integer arg3, BigDecimal arg4, BigDecimal arg5, int arg6, BigDecimal arg7, BigDecimal arg8) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("createSaldo", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Date.class);
                    out.write_value(arg2,Integer.class);
                    out.write_value(arg3,Integer.class);
                    out.write_value(arg4,BigDecimal.class);
                    out.write_value(arg5,BigDecimal.class);
                    out.write_long(arg6);
                    out.write_value(arg7,BigDecimal.class);
                    out.write_value(arg8,BigDecimal.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return createSaldo(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("createSaldo",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return createSaldo(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4,arg5,arg7,arg8},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Date arg1Copy = (Date) copies[1];
                Integer arg2Copy = (Integer) copies[2];
                Integer arg3Copy = (Integer) copies[3];
                BigDecimal arg4Copy = (BigDecimal) copies[4];
                BigDecimal arg5Copy = (BigDecimal) copies[5];
                BigDecimal arg7Copy = (BigDecimal) copies[6];
                BigDecimal arg8Copy = (BigDecimal) copies[7];
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).createSaldo(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy, arg5Copy, arg6, arg7Copy, arg8Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void createSaldoSergey(Integer arg0, Date arg1, Integer arg2, Integer arg3, BigDecimal arg4, BigDecimal arg5, int arg6, BigDecimal arg7, BigDecimal arg8) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("createSaldoSergey", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Date.class);
                    out.write_value(arg2,Integer.class);
                    out.write_value(arg3,Integer.class);
                    out.write_value(arg4,BigDecimal.class);
                    out.write_value(arg5,BigDecimal.class);
                    out.write_long(arg6);
                    out.write_value(arg7,BigDecimal.class);
                    out.write_value(arg8,BigDecimal.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    createSaldoSergey(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("createSaldoSergey",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                createSaldoSergey(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4,arg5,arg7,arg8},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Date arg1Copy = (Date) copies[1];
                Integer arg2Copy = (Integer) copies[2];
                Integer arg3Copy = (Integer) copies[3];
                BigDecimal arg4Copy = (BigDecimal) copies[4];
                BigDecimal arg5Copy = (BigDecimal) copies[5];
                BigDecimal arg7Copy = (BigDecimal) copies[6];
                BigDecimal arg8Copy = (BigDecimal) copies[7];
                ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).createSaldoSergey(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy, arg5Copy, arg6, arg7Copy, arg8Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object[] defineRatePaymentOnContract(Integer arg0, Integer arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("defineRatePaymentOnContract__java_lang_Integer__java_lang_Integer", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Object[]) in.read_value(Object[].class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return defineRatePaymentOnContract(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("defineRatePaymentOnContract__java_lang_Integer__java_lang_Integer",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return defineRatePaymentOnContract(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Integer arg1Copy = (Integer) copies[1];
                Object[] result = ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).defineRatePaymentOnContract(arg0Copy, arg1Copy);
                return (Object[])Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object[] defineRatePaymentOnContract(Integer arg0, Integer arg1, Date arg2, Date arg3, Date arg4, Date arg5, Integer arg6) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("defineRatePaymentOnContract__java_lang_Integer__java_lang_Integer__java_util_Date__java_util_Date__java_util_Date__java_util_Date__java_lang_Integer", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Integer.class);
                    out.write_value(arg2,Date.class);
                    out.write_value(arg3,Date.class);
                    out.write_value(arg4,Date.class);
                    out.write_value(arg5,Date.class);
                    out.write_value(arg6,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Object[]) in.read_value(Object[].class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return defineRatePaymentOnContract(arg0,arg1,arg2,arg3,arg4,arg5,arg6);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("defineRatePaymentOnContract__java_lang_Integer__java_lang_Integer__java_util_Date__java_util_Date__java_util_Date__java_util_Date__java_lang_Integer",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return defineRatePaymentOnContract(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4,arg5,arg6},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Integer arg1Copy = (Integer) copies[1];
                Date arg2Copy = (Date) copies[2];
                Date arg3Copy = (Date) copies[3];
                Date arg4Copy = (Date) copies[4];
                Date arg5Copy = (Date) copies[5];
                Integer arg6Copy = (Integer) copies[6];
                Object[] result = ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).defineRatePaymentOnContract(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy, arg5Copy, arg6Copy);
                return (Object[])Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean deleteChargeOrPaymentOnSaldo(Integer arg0, Date arg1, Integer arg2) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("deleteChargeOrPaymentOnSaldo", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Date.class);
                    out.write_value(arg2,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return deleteChargeOrPaymentOnSaldo(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("deleteChargeOrPaymentOnSaldo",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return deleteChargeOrPaymentOnSaldo(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Date arg1Copy = (Date) copies[1];
                Integer arg2Copy = (Integer) copies[2];
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).deleteChargeOrPaymentOnSaldo(arg0Copy, arg1Copy, arg2Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean fillUsedInAct(boolean arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("fillUsedInAct", true);
                    out.write_boolean(arg0);
                    in = _invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return fillUsedInAct(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("fillUsedInAct",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return fillUsedInAct(arg0);
            }
            try {
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).fillUsedInAct(arg0);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public BigDecimal getChargeRate(Handle arg0, int arg1, boolean arg2) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("getChargeRate", true);
                    Util.writeAbstractObject(out,arg0);
                    out.write_long(arg1);
                    out.write_boolean(arg2);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (BigDecimal) in.read_value(BigDecimal.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getChargeRate(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getChargeRate",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return getChargeRate(arg0, arg1, arg2);
            }
            try {
                Handle arg0Copy = (Handle) Util.copyObject(arg0,_orb());
                BigDecimal result = ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).getChargeRate(arg0Copy, arg1, arg2);
                return (BigDecimal)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public BigDecimal getChargeRateTemp(Handle arg0, int arg1, boolean arg2, int arg3) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("getChargeRateTemp", true);
                    Util.writeAbstractObject(out,arg0);
                    out.write_long(arg1);
                    out.write_boolean(arg2);
                    out.write_long(arg3);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (BigDecimal) in.read_value(BigDecimal.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getChargeRateTemp(arg0,arg1,arg2,arg3);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getChargeRateTemp",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return getChargeRateTemp(arg0, arg1, arg2, arg3);
            }
            try {
                Handle arg0Copy = (Handle) Util.copyObject(arg0,_orb());
                BigDecimal result = ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).getChargeRateTemp(arg0Copy, arg1, arg2, arg3);
                return (BigDecimal)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public BigDecimal getPaymentRate(Handle arg0, int arg1, boolean arg2, Integer arg3, boolean arg4) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("getPaymentRate", true);
                    Util.writeAbstractObject(out,arg0);
                    out.write_long(arg1);
                    out.write_boolean(arg2);
                    out.write_value(arg3,Integer.class);
                    out.write_boolean(arg4);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (BigDecimal) in.read_value(BigDecimal.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getPaymentRate(arg0,arg1,arg2,arg3,arg4);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getPaymentRate",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return getPaymentRate(arg0, arg1, arg2, arg3, arg4);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg3},_orb());
                Handle arg0Copy = (Handle) copies[0];
                Integer arg3Copy = (Integer) copies[1];
                BigDecimal result = ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).getPaymentRate(arg0Copy, arg1, arg2, arg3Copy, arg4);
                return (BigDecimal)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public BigDecimal getPaymentRateTemp(Handle arg0, int arg1, boolean arg2, int arg3) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("getPaymentRateTemp", true);
                    Util.writeAbstractObject(out,arg0);
                    out.write_long(arg1);
                    out.write_boolean(arg2);
                    out.write_long(arg3);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (BigDecimal) in.read_value(BigDecimal.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getPaymentRateTemp(arg0,arg1,arg2,arg3);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getPaymentRateTemp",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return getPaymentRateTemp(arg0, arg1, arg2, arg3);
            }
            try {
                Handle arg0Copy = (Handle) Util.copyObject(arg0,_orb());
                BigDecimal result = ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).getPaymentRateTemp(arg0Copy, arg1, arg2, arg3);
                return (BigDecimal)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean removeSaldo(Integer arg0, Date arg1, Integer arg2) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeSaldo", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Date.class);
                    out.write_value(arg2,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return removeSaldo(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeSaldo",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return removeSaldo(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Date arg1Copy = (Date) copies[1];
                Integer arg2Copy = (Integer) copies[2];
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).removeSaldo(arg0Copy, arg1Copy, arg2Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean rollbackCalcAct(Integer arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("rollbackCalcAct__java_lang_Integer", true);
                    out.write_value(arg0,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return rollbackCalcAct(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("rollbackCalcAct__java_lang_Integer",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return rollbackCalcAct(arg0);
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).rollbackCalcAct(arg0Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean rollbackCalcAct(Integer arg0, int arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("rollbackCalcAct__java_lang_Integer__long", true);
                    out.write_value(arg0,Integer.class);
                    out.write_long(arg1);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return rollbackCalcAct(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("rollbackCalcAct__java_lang_Integer__long",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return rollbackCalcAct(arg0, arg1);
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).rollbackCalcAct(arg0Copy, arg1);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public BigDecimal setChargeRemainderRate(Handle arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("setChargeRemainderRate", true);
                    Util.writeAbstractObject(out,arg0);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (BigDecimal) in.read_value(BigDecimal.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return setChargeRemainderRate(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("setChargeRemainderRate",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return setChargeRemainderRate(arg0);
            }
            try {
                Handle arg0Copy = (Handle) Util.copyObject(arg0,_orb());
                BigDecimal result = ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).setChargeRemainderRate(arg0Copy);
                return (BigDecimal)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean setRateRurForPayment() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("setRateRurForPayment", true);
                    in = _invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return setRateRurForPayment();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("setRateRurForPayment",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return setRateRurForPayment();
            }
            try {
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).setRateRurForPayment();
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean updateSaldo(Integer arg0, Date arg1, Integer arg2, int arg3, BigDecimal arg4, BigDecimal arg5, int arg6, BigDecimal arg7, BigDecimal arg8) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateSaldo", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Date.class);
                    out.write_value(arg2,Integer.class);
                    out.write_long(arg3);
                    out.write_value(arg4,BigDecimal.class);
                    out.write_value(arg5,BigDecimal.class);
                    out.write_long(arg6);
                    out.write_value(arg7,BigDecimal.class);
                    out.write_value(arg8,BigDecimal.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return updateSaldo(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateSaldo",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                return updateSaldo(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg4,arg5,arg7,arg8},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Date arg1Copy = (Date) copies[1];
                Integer arg2Copy = (Integer) copies[2];
                BigDecimal arg4Copy = (BigDecimal) copies[3];
                BigDecimal arg5Copy = (BigDecimal) copies[4];
                BigDecimal arg7Copy = (BigDecimal) copies[5];
                BigDecimal arg8Copy = (BigDecimal) copies[6];
                return ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).updateSaldo(arg0Copy, arg1Copy, arg2Copy, arg3, arg4Copy, arg5Copy, arg6, arg7Copy, arg8Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateSaldoSergey(Integer arg0, Date arg1, Integer arg2, int arg3, BigDecimal arg4, BigDecimal arg5, int arg6, BigDecimal arg7, BigDecimal arg8) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateSaldoSergey", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Date.class);
                    out.write_value(arg2,Integer.class);
                    out.write_long(arg3);
                    out.write_value(arg4,BigDecimal.class);
                    out.write_value(arg5,BigDecimal.class);
                    out.write_long(arg6);
                    out.write_value(arg7,BigDecimal.class);
                    out.write_value(arg8,BigDecimal.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateSaldoSergey(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateSaldoSergey",com.hps.july.arenda.sessionbean.ArendaTransactionMethod.class);
            if (so == null) {
                updateSaldoSergey(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg4,arg5,arg7,arg8},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Date arg1Copy = (Date) copies[1];
                Integer arg2Copy = (Integer) copies[2];
                BigDecimal arg4Copy = (BigDecimal) copies[3];
                BigDecimal arg5Copy = (BigDecimal) copies[4];
                BigDecimal arg7Copy = (BigDecimal) copies[5];
                BigDecimal arg8Copy = (BigDecimal) copies[6];
                ((com.hps.july.arenda.sessionbean.ArendaTransactionMethod)so.servant).updateSaldoSergey(arg0Copy, arg1Copy, arg2Copy, arg3, arg4Copy, arg5Copy, arg6, arg7Copy, arg8Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
}
