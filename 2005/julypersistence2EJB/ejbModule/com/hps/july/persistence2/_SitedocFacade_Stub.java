// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.hps.july.persistence2;

import java.io.Serializable;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ServantObject;

public class _SitedocFacade_Stub extends Stub implements SitedocFacade {
    
    private static final String[] _type_ids = {
        "RMI:com.hps.july.persistence2.SitedocFacade:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000"
    };
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public EJBHome getEJBHome() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_EJBHome", true);
                    in = _invoke(out);
                    return (EJBHome) in.read_Object(EJBHome.class);
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getEJBHome();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_EJBHome",javax.ejb.EJBObject.class);
            if (so == null) {
                return getEJBHome();
            }
            try {
                EJBHome result = ((javax.ejb.EJBObject)so.servant).getEJBHome();
                return (EJBHome)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Handle getHandle() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_handle", true);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Handle) in.read_abstract_interface(Handle.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getHandle();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_handle",javax.ejb.EJBObject.class);
            if (so == null) {
                return getHandle();
            }
            try {
                Handle result = ((javax.ejb.EJBObject)so.servant).getHandle();
                return (Handle)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object getPrimaryKey() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_primaryKey", true);
                    in = _invoke(out);
                    return Util.readAny(in);
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getPrimaryKey();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_primaryKey",javax.ejb.EJBObject.class);
            if (so == null) {
                return getPrimaryKey();
            }
            try {
                Object result = ((javax.ejb.EJBObject)so.servant).getPrimaryKey();
                return (Object)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean isIdentical(EJBObject arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("isIdentical", true);
                    Util.writeRemoteObject(out,arg0);
                    in = _invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return isIdentical(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("isIdentical",javax.ejb.EJBObject.class);
            if (so == null) {
                return isIdentical(arg0);
            }
            try {
                EJBObject arg0Copy = (EJBObject) Util.copyObject(arg0,_orb());
                return ((javax.ejb.EJBObject)so.servant).isIdentical(arg0Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void remove() throws RemoteException, RemoveException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("remove", true);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:javax/ejb/RemoveEx:1.0")) {
                        throw (RemoveException) in.read_value(RemoveException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    remove();
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("remove",javax.ejb.EJBObject.class);
            if (so == null) {
                remove();
                return;
            }
            try {
                ((javax.ejb.EJBObject)so.servant).remove();
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof RemoveException) {
                    throw (RemoveException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void createEtapDoc(EtapDocValueObject arg0, int[] arg1) throws RemoteException, Exception {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("createEtapDoc", true);
                    out.write_value(arg0,EtapDocValueObject.class);
                    out.write_value(cast_array(arg1),int[].class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:java/lang/Ex:1.0")) {
                        throw (Exception) in.read_value(Exception.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    createEtapDoc(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("createEtapDoc",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                createEtapDoc(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                EtapDocValueObject arg0Copy = (EtapDocValueObject) copies[0];
                int[] arg1Copy = (int[]) copies[1];
                ((com.hps.july.persistence2.SitedocFacade)so.servant).createEtapDoc(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof Exception) {
                    throw (Exception)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void createGKRCHDoc(GKRCHDocValueObject arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("createGKRCHDoc__com_hps_july_persistence2_GKRCHDocValueObject", true);
                    out.write_value(arg0,GKRCHDocValueObject.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    createGKRCHDoc(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("createGKRCHDoc__com_hps_july_persistence2_GKRCHDocValueObject",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                createGKRCHDoc(arg0);
                return;
            }
            try {
                GKRCHDocValueObject arg0Copy = (GKRCHDocValueObject) Util.copyObject(arg0,_orb());
                ((com.hps.july.persistence2.SitedocFacade)so.servant).createGKRCHDoc(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void createGKRCHDoc(GKRCHDocValueObject arg0, DocResourceValueObject[] arg1, int[] arg2) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("createGKRCHDoc__com_hps_july_persistence2_GKRCHDocValueObject__org_omg_boxedRMI_com_hps_july_persistence2_seq1_DocResourceValueObject__org_omg_boxedRMI_seq1_long", true);
                    out.write_value(arg0,GKRCHDocValueObject.class);
                    out.write_value(cast_array(arg1),DocResourceValueObject[].class);
                    out.write_value(cast_array(arg2),int[].class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    createGKRCHDoc(arg0,arg1,arg2);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("createGKRCHDoc__com_hps_july_persistence2_GKRCHDocValueObject__org_omg_boxedRMI_com_hps_july_persistence2_seq1_DocResourceValueObject__org_omg_boxedRMI_seq1_long",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                createGKRCHDoc(arg0, arg1, arg2);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                GKRCHDocValueObject arg0Copy = (GKRCHDocValueObject) copies[0];
                DocResourceValueObject[] arg1Copy = (DocResourceValueObject[]) copies[1];
                int[] arg2Copy = (int[]) copies[2];
                ((com.hps.july.persistence2.SitedocFacade)so.servant).createGKRCHDoc(arg0Copy, arg1Copy, arg2Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void createRRLDoc(RRLDocValueObject arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("createRRLDoc__com_hps_july_persistence2_RRLDocValueObject", true);
                    out.write_value(arg0,RRLDocValueObject.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    createRRLDoc(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("createRRLDoc__com_hps_july_persistence2_RRLDocValueObject",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                createRRLDoc(arg0);
                return;
            }
            try {
                RRLDocValueObject arg0Copy = (RRLDocValueObject) Util.copyObject(arg0,_orb());
                ((com.hps.july.persistence2.SitedocFacade)so.servant).createRRLDoc(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void createRRLDoc(RRLDocValueObject arg0, DocResourceValueObject[] arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("createRRLDoc__com_hps_july_persistence2_RRLDocValueObject__org_omg_boxedRMI_com_hps_july_persistence2_seq1_DocResourceValueObject", true);
                    out.write_value(arg0,RRLDocValueObject.class);
                    out.write_value(cast_array(arg1),DocResourceValueObject[].class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    createRRLDoc(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("createRRLDoc__com_hps_july_persistence2_RRLDocValueObject__org_omg_boxedRMI_com_hps_july_persistence2_seq1_DocResourceValueObject",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                createRRLDoc(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                RRLDocValueObject arg0Copy = (RRLDocValueObject) copies[0];
                DocResourceValueObject[] arg1Copy = (DocResourceValueObject[]) copies[1];
                ((com.hps.july.persistence2.SitedocFacade)so.servant).createRRLDoc(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void deleteEtapDoc(int arg0) throws RemoteException, Exception {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("deleteEtapDoc", true);
                    out.write_long(arg0);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:java/lang/Ex:1.0")) {
                        throw (Exception) in.read_value(Exception.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    deleteEtapDoc(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("deleteEtapDoc",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                deleteEtapDoc(arg0);
                return;
            }
            try {
                ((com.hps.july.persistence2.SitedocFacade)so.servant).deleteEtapDoc(arg0);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof Exception) {
                    throw (Exception)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void deleteGKRCHDoc(int arg0) throws RemoteException, Exception {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("deleteGKRCHDoc", true);
                    out.write_long(arg0);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:java/lang/Ex:1.0")) {
                        throw (Exception) in.read_value(Exception.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    deleteGKRCHDoc(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("deleteGKRCHDoc",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                deleteGKRCHDoc(arg0);
                return;
            }
            try {
                ((com.hps.july.persistence2.SitedocFacade)so.servant).deleteGKRCHDoc(arg0);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof Exception) {
                    throw (Exception)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void deleteRRLDoc(int arg0) throws RemoteException, Exception {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("deleteRRLDoc", true);
                    out.write_long(arg0);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:java/lang/Ex:1.0")) {
                        throw (Exception) in.read_value(Exception.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    deleteRRLDoc(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("deleteRRLDoc",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                deleteRRLDoc(arg0);
                return;
            }
            try {
                ((com.hps.july.persistence2.SitedocFacade)so.servant).deleteRRLDoc(arg0);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof Exception) {
                    throw (Exception)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public EtapDocValueObject findEtapDocByPrimaryKey(int arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("findEtapDocByPrimaryKey", true);
                    out.write_long(arg0);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (EtapDocValueObject) in.read_value(EtapDocValueObject.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findEtapDocByPrimaryKey(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findEtapDocByPrimaryKey",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                return findEtapDocByPrimaryKey(arg0);
            }
            try {
                EtapDocValueObject result = ((com.hps.july.persistence2.SitedocFacade)so.servant).findEtapDocByPrimaryKey(arg0);
                return (EtapDocValueObject)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public GKRCHDocValueObject findGKRCHDocByPrimaryKey(int arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("findGKRCHDocByPrimaryKey", true);
                    out.write_long(arg0);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (GKRCHDocValueObject) in.read_value(GKRCHDocValueObject.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findGKRCHDocByPrimaryKey(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findGKRCHDocByPrimaryKey",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                return findGKRCHDocByPrimaryKey(arg0);
            }
            try {
                GKRCHDocValueObject result = ((com.hps.july.persistence2.SitedocFacade)so.servant).findGKRCHDocByPrimaryKey(arg0);
                return (GKRCHDocValueObject)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public RRLDocValueObject findRRLDocByPrimaryKey(int arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("findRRLDocByPrimaryKey", true);
                    out.write_long(arg0);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (RRLDocValueObject) in.read_value(RRLDocValueObject.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findRRLDocByPrimaryKey(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findRRLDocByPrimaryKey",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                return findRRLDocByPrimaryKey(arg0);
            }
            try {
                RRLDocValueObject result = ((com.hps.july.persistence2.SitedocFacade)so.servant).findRRLDocByPrimaryKey(arg0);
                return (RRLDocValueObject)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public int getGKRCHSiteDocType() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_GKRCHSiteDocType", true);
                    in = _invoke(out);
                    return in.read_long();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getGKRCHSiteDocType();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_GKRCHSiteDocType",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                return getGKRCHSiteDocType();
            }
            try {
                return ((com.hps.july.persistence2.SitedocFacade)so.servant).getGKRCHSiteDocType();
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public int getRRLSiteDocType() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_RRLSiteDocType", true);
                    in = _invoke(out);
                    return in.read_long();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getRRLSiteDocType();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_RRLSiteDocType",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                return getRRLSiteDocType();
            }
            try {
                return ((com.hps.july.persistence2.SitedocFacade)so.servant).getRRLSiteDocType();
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateEtapDoc(EtapDocValueObject arg0, int[] arg1) throws RemoteException, Exception {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateEtapDoc", true);
                    out.write_value(arg0,EtapDocValueObject.class);
                    out.write_value(cast_array(arg1),int[].class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:java/lang/Ex:1.0")) {
                        throw (Exception) in.read_value(Exception.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateEtapDoc(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateEtapDoc",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                updateEtapDoc(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                EtapDocValueObject arg0Copy = (EtapDocValueObject) copies[0];
                int[] arg1Copy = (int[]) copies[1];
                ((com.hps.july.persistence2.SitedocFacade)so.servant).updateEtapDoc(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof Exception) {
                    throw (Exception)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateGKRCHDoc(GKRCHDocValueObject arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateGKRCHDoc__com_hps_july_persistence2_GKRCHDocValueObject", true);
                    out.write_value(arg0,GKRCHDocValueObject.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateGKRCHDoc(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateGKRCHDoc__com_hps_july_persistence2_GKRCHDocValueObject",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                updateGKRCHDoc(arg0);
                return;
            }
            try {
                GKRCHDocValueObject arg0Copy = (GKRCHDocValueObject) Util.copyObject(arg0,_orb());
                ((com.hps.july.persistence2.SitedocFacade)so.servant).updateGKRCHDoc(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateGKRCHDoc(GKRCHDocValueObject arg0, DocResourceValueObject[] arg1, int[] arg2) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateGKRCHDoc__com_hps_july_persistence2_GKRCHDocValueObject__org_omg_boxedRMI_com_hps_july_persistence2_seq1_DocResourceValueObject__org_omg_boxedRMI_seq1_long", true);
                    out.write_value(arg0,GKRCHDocValueObject.class);
                    out.write_value(cast_array(arg1),DocResourceValueObject[].class);
                    out.write_value(cast_array(arg2),int[].class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateGKRCHDoc(arg0,arg1,arg2);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateGKRCHDoc__com_hps_july_persistence2_GKRCHDocValueObject__org_omg_boxedRMI_com_hps_july_persistence2_seq1_DocResourceValueObject__org_omg_boxedRMI_seq1_long",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                updateGKRCHDoc(arg0, arg1, arg2);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                GKRCHDocValueObject arg0Copy = (GKRCHDocValueObject) copies[0];
                DocResourceValueObject[] arg1Copy = (DocResourceValueObject[]) copies[1];
                int[] arg2Copy = (int[]) copies[2];
                ((com.hps.july.persistence2.SitedocFacade)so.servant).updateGKRCHDoc(arg0Copy, arg1Copy, arg2Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateRRLDoc(RRLDocValueObject arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateRRLDoc__com_hps_july_persistence2_RRLDocValueObject", true);
                    out.write_value(arg0,RRLDocValueObject.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateRRLDoc(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateRRLDoc__com_hps_july_persistence2_RRLDocValueObject",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                updateRRLDoc(arg0);
                return;
            }
            try {
                RRLDocValueObject arg0Copy = (RRLDocValueObject) Util.copyObject(arg0,_orb());
                ((com.hps.july.persistence2.SitedocFacade)so.servant).updateRRLDoc(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateRRLDoc(RRLDocValueObject arg0, DocResourceValueObject[] arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateRRLDoc__com_hps_july_persistence2_RRLDocValueObject__org_omg_boxedRMI_com_hps_july_persistence2_seq1_DocResourceValueObject", true);
                    out.write_value(arg0,RRLDocValueObject.class);
                    out.write_value(cast_array(arg1),DocResourceValueObject[].class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateRRLDoc(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateRRLDoc__com_hps_july_persistence2_RRLDocValueObject__org_omg_boxedRMI_com_hps_july_persistence2_seq1_DocResourceValueObject",com.hps.july.persistence2.SitedocFacade.class);
            if (so == null) {
                updateRRLDoc(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                RRLDocValueObject arg0Copy = (RRLDocValueObject) copies[0];
                DocResourceValueObject[] arg1Copy = (DocResourceValueObject[]) copies[1];
                ((com.hps.july.persistence2.SitedocFacade)so.servant).updateRRLDoc(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    // This method is required as a work-around for
    // a bug in the JDK 1.1.6 verifier.
    
    private Serializable cast_array(Object obj) {
        return (Serializable)obj;
    }
}
