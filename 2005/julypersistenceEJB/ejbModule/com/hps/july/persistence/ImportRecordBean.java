package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Запись импорта данных
 */
public class ImportRecordBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	public String errlabel;
	public int imprecid;
	public String keyfields;
	public String param1;
	public String param2;
	public String param3;
	public java.sql.Timestamp recendtime;
	public String result;
	private final static long serialVersionUID = 3206093459760846163L;
	public java.lang.Integer importsession_impsesid;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink importsessionLink = null;
	public String iaction;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("recendtime", getRecendtime());
        h.put("result", getResult());
        h.put("keyfields", getKeyfields());
        h.put("errlabel", getErrlabel());
        h.put("param3", getParam3());
        h.put("param2", getParam2());
        h.put("param1", getParam1());
        h.put("imprecid", new Integer(getImprecid()));
        h.put("importsessionKey", getImportsessionKey());
        h.put("iaction", getIaction());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.sql.Timestamp localRecendtime = (java.sql.Timestamp) h.get("recendtime");
        java.lang.String localResult = (java.lang.String) h.get("result");
        java.lang.String localKeyfields = (java.lang.String) h.get("keyfields");
        java.lang.String localErrlabel = (java.lang.String) h.get("errlabel");
        java.lang.String localParam3 = (java.lang.String) h.get("param3");
        java.lang.String localParam2 = (java.lang.String) h.get("param2");
        java.lang.String localParam1 = (java.lang.String) h.get("param1");
        java.lang.String localIaction = (java.lang.String) h.get("iaction");

        if ( h.containsKey("recendtime") )
            setRecendtime((localRecendtime));
        if ( h.containsKey("result") )
            setResult((localResult));
        if ( h.containsKey("keyfields") )
            setKeyfields((localKeyfields));
        if ( h.containsKey("errlabel") )
            setErrlabel((localErrlabel));
        if ( h.containsKey("param3") )
            setParam3((localParam3));
        if ( h.containsKey("param2") )
            setParam2((localParam2));
        if ( h.containsKey("param1") )
            setParam1((localParam1));
        if ( h.containsKey("iaction") )
            setIaction((localIaction));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getImportsessionLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	importsessionLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argImprecid int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argImprecid, int argImpSesid, java.sql.Timestamp argRecendtime,
		String argAction, String argResult, String argErrlabel) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	imprecid = argImprecid;
	importsession_impsesid = new Integer(argImpSesid);
	recendtime = argRecendtime;
	iaction = argAction;
	result = argResult;
	errlabel = argErrlabel;
	param1 = null;
	param2 = null;
	param3 = null;
	keyfields = null;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argImprecid int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argImprecid) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * Getter method for errlabel
 * @return java.lang.String
 */
public java.lang.String getErrlabel() {
	return errlabel;
}
/**
 * Getter method for iaction
 */
public java.lang.String getIaction() {
	return iaction;
}
/**
 * This method was generated for supporting the association named ImportRecord2session.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.ImportSession getImportsession() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.ImportSession)this.getImportsessionLink().value();
}
/**
 * This method was generated for supporting the association named ImportRecord2session.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.ImportSessionKey getImportsessionKey() {
	com.hps.july.persistence.ImportSessionKey temp = null;
	temp = new com.hps.july.persistence.ImportSessionKey();
	boolean importsession_NULLTEST = true;
	importsession_NULLTEST &= (importsession_impsesid == null);
	temp.impsesid = ((importsession_impsesid == null) ? 0 : importsession_impsesid.intValue());
	if (importsession_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named ImportRecord2session.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getImportsessionLink() {
	if (importsessionLink == null)
		importsessionLink = new ImportRecordToImportsessionLink(this);
	return importsessionLink;
}
/**
 * Insert the method's description here.
 * Creation date: (09.04.2003 12:33:48)
 * @return int
 */
public int getImprecid() {
	return imprecid;
}
/**
 * Getter method for keyfields
 * @return java.lang.String
 */
public java.lang.String getKeyfields() {
	return keyfields;
}
/**
 * Getter method for param1
 * @return java.lang.String
 */
public java.lang.String getParam1() {
	return param1;
}
/**
 * Getter method for param2
 * @return java.lang.String
 */
public java.lang.String getParam2() {
	return param2;
}
/**
 * Getter method for param3
 * @return java.lang.String
 */
public java.lang.String getParam3() {
	return param3;
}
/**
 * Getter method for recendtime
 * @return java.sql.Timestamp
 */
public java.sql.Timestamp getRecendtime() {
	return recendtime;
}
/**
 * Getter method for result
 * @return java.lang.String
 */
public java.lang.String getResult() {
	return result;
}
/**
 * This method was generated for supporting the association named ImportRecord2session.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetImportsessionKey(com.hps.july.persistence.ImportSessionKey inKey) {
	boolean importsession_NULLTEST = (inKey == null);
	if (importsession_NULLTEST) importsession_impsesid = null; else importsession_impsesid = (new Integer(inKey.impsesid));
}
/**
 * This method was generated for supporting the association named ImportRecord2session.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetImportsession(com.hps.july.persistence.ImportSession anImportsession) throws java.rmi.RemoteException {
	this.getImportsessionLink().secondarySet(anImportsession);
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Setter method for errlabel
 * @param newValue java.lang.String
 */
public void setErrlabel(java.lang.String newValue) {
	this.errlabel = newValue;
}
/**
 * Setter method for iaction
 */
public void setIaction(java.lang.String newValue) {
	this.iaction = newValue;
}
/**
 * This method was generated for supporting the association named ImportRecord2session.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setImportsession(com.hps.july.persistence.ImportSession anImportsession) throws java.rmi.RemoteException {
	this.getImportsessionLink().set(anImportsession);
}
/**
 * Setter method for keyfields
 * @param newValue java.lang.String
 */
public void setKeyfields(java.lang.String newValue) {
	this.keyfields = newValue;
}
/**
 * Setter method for param1
 * @param newValue java.lang.String
 */
public void setParam1(java.lang.String newValue) {
	this.param1 = newValue;
}
/**
 * Setter method for param2
 * @param newValue java.lang.String
 */
public void setParam2(java.lang.String newValue) {
	this.param2 = newValue;
}
/**
 * Setter method for param3
 * @param newValue java.lang.String
 */
public void setParam3(java.lang.String newValue) {
	this.param3 = newValue;
}
/**
 * Setter method for recendtime
 * @param newValue java.sql.Timestamp
 */
public void setRecendtime(java.sql.Timestamp newValue) {
	this.recendtime = newValue;
}
/**
 * Setter method for result
 * @param newValue java.lang.String
 */
public void setResult(java.lang.String newValue) {
	this.result = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
