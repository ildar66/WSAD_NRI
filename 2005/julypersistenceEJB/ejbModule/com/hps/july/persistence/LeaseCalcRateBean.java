package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Курсы расчета по аренде
 */
public class LeaseCalcRateBean implements EntityBean {
	public Boolean byhand;
	private javax.ejb.EntityContext entityContext = null;
	public java.math.BigDecimal rate;
	private final static long serialVersionUID = 3206093459760846163L;
	public java.lang.Integer docposition_leaseDocPosition;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink docpositionLink = null;
	public java.lang.Integer currency_currency;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink currencyLink = null;
	public java.lang.Integer act_leaseDocument;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink actLink = null;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("byhand", getByhand());
        h.put("currencyKey", getCurrencyKey());
        h.put("actKey", getActKey());
        h.put("docpositionKey", getDocpositionKey());
        h.put("rate", getRate());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.lang.Boolean localByhand = (java.lang.Boolean) h.get("byhand");
        java.math.BigDecimal localRate = (java.math.BigDecimal) h.get("rate");

        if ( h.containsKey("byhand") )
            setByhand((localByhand));
        if ( h.containsKey("rate") )
            setRate((localRate));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getDocpositionLink());
	links.addElement(getCurrencyLink());
	links.addElement(getActLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	docpositionLink = null;
	currencyLink = null;
	actLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(Integer argDocPosition, Integer argCurrency,
		java.math.BigDecimal argRate, Boolean argByHand) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	docposition_leaseDocPosition = argDocPosition;
	currency_currency = argCurrency;
	rate = PersistenceUtil.dec(argRate, 4);
	byhand = argByHand;
	act_leaseDocument = null;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate() throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * This method was generated for supporting the association named LeaseCalcRate2act.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.LeaseMutualActNew getAct() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.LeaseMutualActNew)this.getActLink().value();
}
/**
 * This method was generated for supporting the association named LeaseCalcRate2act.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.LeaseDocumentKey getActKey() {
	com.hps.july.persistence.LeaseDocumentKey temp = null;
	temp = new com.hps.july.persistence.LeaseDocumentKey();
	boolean act_NULLTEST = true;
	act_NULLTEST &= (act_leaseDocument == null);
	temp.leaseDocument = ((act_leaseDocument == null) ? 0 : act_leaseDocument.intValue());
	if (act_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named LeaseCalcRate2act.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getActLink() {
	if (actLink == null)
		actLink = new LeaseCalcRateToActLink(this);
	return actLink;
}
/**
 * Getter method for byhand
 * @return java.lang.Boolean
 */
public java.lang.Boolean getByhand() {
	return byhand;
}
/**
 * This method was generated for supporting the association named LeaseCalcRate2currency.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.Currency getCurrency() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.Currency)this.getCurrencyLink().value();
}
/**
 * This method was generated for supporting the association named LeaseCalcRate2currency.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.CurrencyKey getCurrencyKey() {
	com.hps.july.persistence.CurrencyKey temp = null;
	temp = new com.hps.july.persistence.CurrencyKey();
	boolean currency_NULLTEST = true;
	currency_NULLTEST &= (currency_currency == null);
	temp.currency = ((currency_currency == null) ? 0 : currency_currency.intValue());
	if (currency_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named LeaseCalcRate2currency.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getCurrencyLink() {
	if (currencyLink == null)
		currencyLink = new LeaseCalcRateToCurrencyLink(this);
	return currencyLink;
}
/**
 * This method was generated for supporting the association named LeaseCalcRate2docposition.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.LeaseDocPosition getDocposition() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.LeaseDocPosition)this.getDocpositionLink().value();
}
/**
 * This method was generated for supporting the association named LeaseCalcRate2docposition.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.LeaseDocPositionKey getDocpositionKey() {
	com.hps.july.persistence.LeaseDocPositionKey temp = null;
	temp = new com.hps.july.persistence.LeaseDocPositionKey();
	boolean docposition_NULLTEST = true;
	docposition_NULLTEST &= (docposition_leaseDocPosition == null);
	temp.leaseDocPosition = ((docposition_leaseDocPosition == null) ? 0 : docposition_leaseDocPosition.intValue());
	if (docposition_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named LeaseCalcRate2docposition.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getDocpositionLink() {
	if (docpositionLink == null)
		docpositionLink = new LeaseCalcRateToDocpositionLink(this);
	return docpositionLink;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * Getter method for rate
 * @return java.math.BigDecimal
 */
public java.math.BigDecimal getRate() {
	return rate;
}
/**
 * This method was generated for supporting the association named LeaseCalcRate2act.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetActKey(com.hps.july.persistence.LeaseDocumentKey inKey) {
	boolean act_NULLTEST = (inKey == null);
	if (act_NULLTEST) act_leaseDocument = null; else act_leaseDocument = (new Integer(inKey.leaseDocument));
}
/**
 * This method was generated for supporting the association named LeaseCalcRate2currency.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetCurrencyKey(com.hps.july.persistence.CurrencyKey inKey) {
	boolean currency_NULLTEST = (inKey == null);
	if (currency_NULLTEST) currency_currency = null; else currency_currency = (new Integer(inKey.currency));
}
/**
 * This method was generated for supporting the association named LeaseCalcRate2docposition.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetDocpositionKey(com.hps.july.persistence.LeaseDocPositionKey inKey) {
	boolean docposition_NULLTEST = (inKey == null);
	if (docposition_NULLTEST) docposition_leaseDocPosition = null; else docposition_leaseDocPosition = (new Integer(inKey.leaseDocPosition));
}
/**
 * This method was generated for supporting the association named LeaseCalcRate2act.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetAct(com.hps.july.persistence.LeaseMutualActNew anAct) throws java.rmi.RemoteException {
	this.getActLink().secondarySet(anAct);
}
/**
 * This method was generated for supporting the association named LeaseCalcRate2act.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setAct(com.hps.july.persistence.LeaseMutualActNew anAct) throws java.rmi.RemoteException {
	this.getActLink().set(anAct);
}
/**
 * Setter method for byhand
 * @param newValue java.lang.Boolean
 */
public void setByhand(java.lang.Boolean newValue) {
	this.byhand = newValue;
}
/**
 * This method was generated for supporting the association named LeaseCalcRate2currency.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setCurrency(com.hps.july.persistence.Currency aCurrency) throws java.rmi.RemoteException {
	this.getCurrencyLink().set(aCurrency);
}
/**
 * This method was generated for supporting the association named LeaseCalcRate2docposition.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setDocposition(com.hps.july.persistence.LeaseDocPosition aDocposition) throws java.rmi.RemoteException {
	this.getDocpositionLink().set(aDocposition);
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Setter method for rate
 * @param newValue java.math.BigDecimal
 */
public void setRate(java.math.BigDecimal newValue) {
	this.rate = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
