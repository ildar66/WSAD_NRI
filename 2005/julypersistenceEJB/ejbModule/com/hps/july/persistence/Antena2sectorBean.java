package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Связь антены и сектора
 */
public class Antena2sectorBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	private final static long serialVersionUID = 3206093459760846163L;
	public java.lang.Integer antenna_idanten;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink antennaLink = null;
	public java.lang.Integer sector_idsect;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink sectorLink = null;
	public Boolean byhand;
	public int datasource;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("byhand", getByhand());
        h.put("datasource", new Integer(getDatasource()));
        h.put("sectorKey", getSectorKey());
        h.put("antennaKey", getAntennaKey());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.lang.Boolean localByhand = (java.lang.Boolean) h.get("byhand");
        Integer localDatasource = (Integer) h.get("datasource");

        if ( h.containsKey("byhand") )
            setByhand((localByhand));
        if ( h.containsKey("datasource") )
            setDatasource((localDatasource).intValue());

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getAntennaLink());
	links.addElement(getSectorLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	antennaLink = null;
	sectorLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argAnten, int argSector) throws javax.ejb.CreateException, java.rmi.RemoteException {

	ejbCreate(argAnten, argSector, Boolean.TRUE);
}
/**
 * ejbCreate method for a CMP entity bean
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argAnten, int argSector, Boolean argByhand) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	antenna_idanten = new Integer(argAnten);
	sector_idsect = new Integer(argSector);
	byhand = argByhand;
	datasource = 0;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate() throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * This method was generated for supporting the association named Antena2sector2antenna.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.Antenna getAntenna() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.Antenna)this.getAntennaLink().value();
}
/**
 * This method was generated for supporting the association named Antena2sector2antenna.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.AntennaKey getAntennaKey() {
	com.hps.july.persistence.AntennaKey temp = null;
	temp = new com.hps.july.persistence.AntennaKey();
	boolean antenna_NULLTEST = true;
	antenna_NULLTEST &= (antenna_idanten == null);
	temp.idanten = ((antenna_idanten == null) ? 0 : antenna_idanten.intValue());
	if (antenna_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named Antena2sector2antenna.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getAntennaLink() {
	if (antennaLink == null)
		antennaLink = new Antena2sectorToAntennaLink(this);
	return antennaLink;
}
/**
 * Getter method for byhand
 */
public java.lang.Boolean getByhand() {
	return byhand;
}
/**
 * Getter method for datasource
 */
public int getDatasource() {
	return datasource;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * This method was generated for supporting the association named Antena2sector2sector.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.Sector getSector() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.Sector)this.getSectorLink().value();
}
/**
 * This method was generated for supporting the association named Antena2sector2sector.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.SectorKey getSectorKey() {
	com.hps.july.persistence.SectorKey temp = null;
	temp = new com.hps.july.persistence.SectorKey();
	boolean sector_NULLTEST = true;
	sector_NULLTEST &= (sector_idsect == null);
	temp.idsect = ((sector_idsect == null) ? 0 : sector_idsect.intValue());
	if (sector_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named Antena2sector2sector.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getSectorLink() {
	if (sectorLink == null)
		sectorLink = new Antena2sectorToSectorLink(this);
	return sectorLink;
}
/**
 * This method was generated for supporting the association named Antena2sector2antenna.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetAntennaKey(com.hps.july.persistence.AntennaKey inKey) {
	boolean antenna_NULLTEST = (inKey == null);
	if (antenna_NULLTEST) antenna_idanten = null; else antenna_idanten = (new Integer(inKey.idanten));
}
/**
 * This method was generated for supporting the association named Antena2sector2sector.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetSectorKey(com.hps.july.persistence.SectorKey inKey) {
	boolean sector_NULLTEST = (inKey == null);
	if (sector_NULLTEST) sector_idsect = null; else sector_idsect = (new Integer(inKey.idsect));
}
/**
 * This method was generated for supporting the association named Antena2sector2antenna.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setAntenna(com.hps.july.persistence.Antenna anAntenna) throws java.rmi.RemoteException {
	this.getAntennaLink().set(anAntenna);
}
/**
 * Setter method for byhand
 */
public void setByhand(java.lang.Boolean newValue) {
	this.byhand = newValue;
}
/**
 * Setter method for datasource
 */
public void setDatasource(int newValue) {
	this.datasource = newValue;
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * This method was generated for supporting the association named Antena2sector2sector.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setSector(com.hps.july.persistence.Sector aSector) throws java.rmi.RemoteException {
	this.getSectorLink().set(aSector);
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
