package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Данные PIE - позиции документов из Platinum
 */
public class PIEDocPosNriBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	public int idrecdocpos;
	public int idresnri;
	public Integer oldstoragecard;
	public String partynum;
	public java.math.BigDecimal price;
	public java.math.BigDecimal qty;
	public String serialnumplat;
	private final static long serialVersionUID = 3206093459760846163L;
	public Integer storagecard;
	public java.lang.Integer piedocnri_idrecdoc;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink piedocnriLink = null;
	public String countpolicy;
	public String partynumplat;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("qty", getQty());
        h.put("serialnumplat", getSerialnumplat());
        h.put("oldstoragecard", getOldstoragecard());
        h.put("idrecdocpos", new Integer(getIdrecdocpos()));
        h.put("partynumplat", getPartynumplat());
        h.put("idresnri", new Integer(getIdresnri()));
        h.put("price", getPrice());
        h.put("piedocnriKey", getPiedocnriKey());
        h.put("countpolicy", getCountpolicy());
        h.put("partynum", getPartynum());
        h.put("storagecard", getStoragecard());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.math.BigDecimal localQty = (java.math.BigDecimal) h.get("qty");
        java.lang.String localSerialnumplat = (java.lang.String) h.get("serialnumplat");
        java.lang.Integer localOldstoragecard = (java.lang.Integer) h.get("oldstoragecard");
        java.lang.String localPartynumplat = (java.lang.String) h.get("partynumplat");
        Integer localIdresnri = (Integer) h.get("idresnri");
        java.math.BigDecimal localPrice = (java.math.BigDecimal) h.get("price");
        java.lang.String localCountpolicy = (java.lang.String) h.get("countpolicy");
        java.lang.String localPartynum = (java.lang.String) h.get("partynum");
        java.lang.Integer localStoragecard = (java.lang.Integer) h.get("storagecard");

        if ( h.containsKey("qty") )
            setQty((localQty));
        if ( h.containsKey("serialnumplat") )
            setSerialnumplat((localSerialnumplat));
        if ( h.containsKey("oldstoragecard") )
            setOldstoragecard((localOldstoragecard));
        if ( h.containsKey("partynumplat") )
            setPartynumplat((localPartynumplat));
        if ( h.containsKey("idresnri") )
            setIdresnri((localIdresnri).intValue());
        if ( h.containsKey("price") )
            setPrice((localPrice));
        if ( h.containsKey("countpolicy") )
            setCountpolicy((localCountpolicy));
        if ( h.containsKey("partynum") )
            setPartynum((localPartynum));
        if ( h.containsKey("storagecard") )
            setStoragecard((localStoragecard));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getPiedocnriLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	piedocnriLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argIdrecdocpos int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argIdrecdocpos, int argIdRecDoc, int argIdResNri, java.math.BigDecimal argQty,
			String argCountpolicy) 
		throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	idrecdocpos = argIdrecdocpos;
	piedocnri_idrecdoc = new Integer(argIdRecDoc);
	idresnri = argIdResNri;
	qty = argQty;
	storagecard = null;
	serialnumplat = null;
	partynum = null;
	oldstoragecard = null;
	price = null;
	countpolicy = argCountpolicy;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argIdrecdocpos int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argIdrecdocpos) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * Getter method for countpolicy
 */
public java.lang.String getCountpolicy() {
	return countpolicy;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * Insert the method's description here.
 * Creation date: (19.12.2002 12:49:28)
 * @return int
 */
public int getIdrecdocpos() {
	return idrecdocpos;
}
/**
 * Getter method for idresnri
 * @return int
 */
public int getIdresnri() {
	return idresnri;
}
/**
 * Getter method for oldstoragecard
 * @return java.lang.Integer
 */
public java.lang.Integer getOldstoragecard() {
	return oldstoragecard;
}
/**
 * Getter method for partynum
 * @return java.lang.String
 */
public java.lang.String getPartynum() {
	return partynum;
}
/**
 * Getter method for partynumplat
 */
public java.lang.String getPartynumplat() {
	return partynumplat;
}
/**
 * This method was generated for supporting the association named PIEDocPosNri2piedoc.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.PIEDocNri getPiedocnri() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.PIEDocNri)this.getPiedocnriLink().value();
}
/**
 * This method was generated for supporting the association named PIEDocPosNri2piedoc.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.PIEDocNriKey getPiedocnriKey() {
	com.hps.july.persistence.PIEDocNriKey temp = null;
	temp = new com.hps.july.persistence.PIEDocNriKey();
	boolean piedocnri_NULLTEST = true;
	piedocnri_NULLTEST &= (piedocnri_idrecdoc == null);
	temp.idrecdoc = ((piedocnri_idrecdoc == null) ? 0 : piedocnri_idrecdoc.intValue());
	if (piedocnri_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named PIEDocPosNri2piedoc.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getPiedocnriLink() {
	if (piedocnriLink == null)
		piedocnriLink = new PIEDocPosNriToPiedocnriLink(this);
	return piedocnriLink;
}
/**
 * Getter method for price
 * @return java.math.BigDecimal
 */
public java.math.BigDecimal getPrice() {
	return price;
}
/**
 * Getter method for qty
 * @return java.math.BigDecimal
 */
public java.math.BigDecimal getQty() {
	return qty;
}
/**
 * Getter method for serialnumplat
 * @return java.lang.String
 */
public java.lang.String getSerialnumplat() {
	return serialnumplat;
}
/**
 * Getter method for storagecard
 * @return java.lang.Integer
 */
public java.lang.Integer getStoragecard() {
	return storagecard;
}
/**
 * This method was generated for supporting the association named PIEDocPosNri2piedoc.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetPiedocnriKey(com.hps.july.persistence.PIEDocNriKey inKey) {
	boolean piedocnri_NULLTEST = (inKey == null);
	if (piedocnri_NULLTEST) piedocnri_idrecdoc = null; else piedocnri_idrecdoc = (new Integer(inKey.idrecdoc));
}
/**
 * This method was generated for supporting the association named PIEDocPosNri2piedoc.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetPiedocnri(com.hps.july.persistence.PIEDocNri aPiedocnri) throws java.rmi.RemoteException {
	this.getPiedocnriLink().secondarySet(aPiedocnri);
}
/**
 * Setter method for countpolicy
 */
public void setCountpolicy(java.lang.String newValue) {
	this.countpolicy = newValue;
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Setter method for idresnri
 * @param newValue int
 */
public void setIdresnri(int newValue) {
	this.idresnri = newValue;
}
/**
 * Setter method for oldstoragecard
 * @param newValue java.lang.Integer
 */
public void setOldstoragecard(java.lang.Integer newValue) {
	this.oldstoragecard = newValue;
}
/**
 * Setter method for partynum
 * @param newValue java.lang.String
 */
public void setPartynum(java.lang.String newValue) {
	this.partynum = newValue;
}
/**
 * Setter method for partynumplat
 */
public void setPartynumplat(java.lang.String newValue) {
	this.partynumplat = newValue;
}
/**
 * This method was generated for supporting the association named PIEDocPosNri2piedoc.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setPiedocnri(com.hps.july.persistence.PIEDocNri aPiedocnri) throws java.rmi.RemoteException {
	this.getPiedocnriLink().set(aPiedocnri);
}
/**
 * Setter method for price
 * @param newValue java.math.BigDecimal
 */
public void setPrice(java.math.BigDecimal newValue) {
	this.price = newValue;
}
/**
 * Setter method for qty
 * @param newValue java.math.BigDecimal
 */
public void setQty(java.math.BigDecimal newValue) {
	this.qty = newValue;
}
/**
 * Setter method for serialnumplat
 * @param newValue java.lang.String
 */
public void setSerialnumplat(java.lang.String newValue) {
	this.serialnumplat = newValue;
}
/**
 * Setter method for storagecard
 * @param newValue java.lang.Integer
 */
public void setStoragecard(java.lang.Integer newValue) {
	this.storagecard = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
