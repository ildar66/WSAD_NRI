package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Тип курса валюты
 */
public class RateTypeBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	public String name;
	public int ratetype;
	private final static long serialVersionUID = 3206093459760846163L;
	public java.lang.Integer basecurrency_currency;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink basecurrencyLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink rateLink = null;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("ratetype", new Integer(getRatetype()));
        h.put("basecurrencyKey", getBasecurrencyKey());
        h.put("name", getName());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        Integer localRatetype = (Integer) h.get("ratetype");
        java.lang.String localName = (java.lang.String) h.get("name");

        if ( h.containsKey("ratetype") )
            setRatetype((localRatetype).intValue());
        if ( h.containsKey("name") )
            setName((localName));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getBasecurrencyLink());
	links.addElement(getRateLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	basecurrencyLink = null;
	rateLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argRatetype int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argRatetype) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	ratetype = argRatetype;
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argRatetype int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argRatetype, String argName, Integer argBaseCurrency ) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	name = null;
	ratetype = 0;
	basecurrency_currency = null;

	ratetype = argRatetype;
	name = argName;
	basecurrency_currency = argBaseCurrency;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argRatetype int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argRatetype) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * This method was generated for supporting the association named RateTypes2Currency.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.Currency getBasecurrency() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.Currency)this.getBasecurrencyLink().value();
}
/**
 * This method was generated for supporting the association named RateTypes2Currency.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.CurrencyKey getBasecurrencyKey() {
	com.hps.july.persistence.CurrencyKey temp = null;
	temp = new com.hps.july.persistence.CurrencyKey();
	boolean basecurrency_NULLTEST = true;
	basecurrency_NULLTEST &= (basecurrency_currency == null);
	temp.currency = ((basecurrency_currency == null) ? 0 : basecurrency_currency.intValue());
	if (basecurrency_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named RateTypes2Currency.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getBasecurrencyLink() {
	if (basecurrencyLink == null)
		basecurrencyLink = new RateTypeToBasecurrencyLink(this);
	return basecurrencyLink;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * Getter method for name
 * @return java.lang.String
 */
public java.lang.String getName() {
	return name;
}
/**
 * This method was generated for supporting the association named Rates2RateType.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getRate() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getRateLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named Rates2RateType.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getRateLink() {
	if (rateLink == null)
		rateLink = new RateTypeToRateLink(this);
	return rateLink;
}
/**
 * Insert the method's description here.
 * Creation date: (18.04.2002 10:56:16)
 * @return int
 */
public int getRatetype() {
	return ratetype;
}
/**
 * This method was generated for supporting the association named RateTypes2Currency.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetBasecurrencyKey(com.hps.july.persistence.CurrencyKey inKey) {
	boolean basecurrency_NULLTEST = (inKey == null);
	if (basecurrency_NULLTEST) basecurrency_currency = null; else basecurrency_currency = (new Integer(inKey.currency));
}
/**
 * This method was generated for supporting the association named Rates2RateType.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddRate(com.hps.july.persistence.Rate aRate) {
	this.getRateLink().secondaryAddElement(aRate);
}
/**
 * This method was generated for supporting the association named Rates2RateType.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveRate(com.hps.july.persistence.Rate aRate) {
	this.getRateLink().secondaryRemoveElement(aRate);
}
/**
 * This method was generated for supporting the association named RateTypes2Currency.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetBasecurrency(com.hps.july.persistence.Currency aBasecurrency) throws java.rmi.RemoteException {
	this.getBasecurrencyLink().secondarySet(aBasecurrency);
}
/**
 * This method was generated for supporting the association named RateTypes2Currency.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setBasecurrency(com.hps.july.persistence.Currency aBasecurrency) throws java.rmi.RemoteException {
	this.getBasecurrencyLink().set(aBasecurrency);
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Setter method for name
 * @param newValue java.lang.String
 */
public void setName(java.lang.String newValue) {
	this.name = newValue;
}
/**
 * Insert the method's description here.
 * Creation date: (18.04.2002 10:56:16)
 * @param newRatetype int
 */
public void setRatetype(int newRatetype) {
	ratetype = newRatetype;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
