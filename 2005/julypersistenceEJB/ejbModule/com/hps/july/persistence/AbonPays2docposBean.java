package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Связь абонентского платежа с позицией договора
 */
public class AbonPays2docposBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	private final static long serialVersionUID = 3206093459760846163L;
	public java.lang.Integer leasedocposition_leaseDocPosition;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink leasedocpositionLink = null;
	public java.lang.Integer paypos_paypos;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink payposLink = null;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("payposKey", getPayposKey());
        h.put("leasedocpositionKey", getLeasedocpositionKey());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {


}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getLeasedocpositionLink());
	links.addElement(getPayposLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	leasedocpositionLink = null;
	payposLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argLeaseDocposition, int argPayPos) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	leasedocposition_leaseDocPosition = new Integer(argLeaseDocposition);
	paypos_paypos = new Integer(argPayPos);
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate() throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * This method was generated for supporting the association named AbonPays2docpos2docpos.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.LeaseDocPosition getLeasedocposition() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.LeaseDocPosition)this.getLeasedocpositionLink().value();
}
/**
 * This method was generated for supporting the association named AbonPays2docpos2docpos.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.LeaseDocPositionKey getLeasedocpositionKey() {
	com.hps.july.persistence.LeaseDocPositionKey temp = null;
	temp = new com.hps.july.persistence.LeaseDocPositionKey();
	boolean leasedocposition_NULLTEST = true;
	leasedocposition_NULLTEST &= (leasedocposition_leaseDocPosition == null);
	temp.leaseDocPosition = ((leasedocposition_leaseDocPosition == null) ? 0 : leasedocposition_leaseDocPosition.intValue());
	if (leasedocposition_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named AbonPays2docpos2docpos.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getLeasedocpositionLink() {
	if (leasedocpositionLink == null)
		leasedocpositionLink = new AbonPays2docposToLeasedocpositionLink(this);
	return leasedocpositionLink;
}
/**
 * This method was generated for supporting the association named AbonPays2docpos2pays.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.AbonentPayment getPaypos() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.AbonentPayment)this.getPayposLink().value();
}
/**
 * This method was generated for supporting the association named AbonPays2docpos2pays.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.AbonentPaymentKey getPayposKey() {
	com.hps.july.persistence.AbonentPaymentKey temp = null;
	temp = new com.hps.july.persistence.AbonentPaymentKey();
	boolean paypos_NULLTEST = true;
	paypos_NULLTEST &= (paypos_paypos == null);
	temp.paypos = ((paypos_paypos == null) ? 0 : paypos_paypos.intValue());
	if (paypos_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named AbonPays2docpos2pays.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getPayposLink() {
	if (payposLink == null)
		payposLink = new AbonPays2docposToPayposLink(this);
	return payposLink;
}
/**
 * This method was generated for supporting the association named AbonPays2docpos2docpos.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetLeasedocpositionKey(com.hps.july.persistence.LeaseDocPositionKey inKey) {
	boolean leasedocposition_NULLTEST = (inKey == null);
	if (leasedocposition_NULLTEST) leasedocposition_leaseDocPosition = null; else leasedocposition_leaseDocPosition = (new Integer(inKey.leaseDocPosition));
}
/**
 * This method was generated for supporting the association named AbonPays2docpos2pays.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetPayposKey(com.hps.july.persistence.AbonentPaymentKey inKey) {
	boolean paypos_NULLTEST = (inKey == null);
	if (paypos_NULLTEST) paypos_paypos = null; else paypos_paypos = (new Integer(inKey.paypos));
}
/**
 * This method was generated for supporting the association named AbonPays2docpos2pays.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetPaypos(com.hps.july.persistence.AbonentPayment aPaypos) throws java.rmi.RemoteException {
	this.getPayposLink().secondarySet(aPaypos);
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * This method was generated for supporting the association named AbonPays2docpos2docpos.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setLeasedocposition(com.hps.july.persistence.LeaseDocPosition aLeasedocposition) throws java.rmi.RemoteException {
	this.getLeasedocpositionLink().set(aLeasedocposition);
}
/**
 * This method was generated for supporting the association named AbonPays2docpos2pays.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setPaypos(com.hps.july.persistence.AbonentPayment aPaypos) throws java.rmi.RemoteException {
	this.getPayposLink().set(aPaypos);
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
