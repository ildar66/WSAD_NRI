package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Связь начислений и платежей договора аренды
 */
public class LeaseDNOPBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	private final static long serialVersionUID = 3206093459760846163L;
	public java.lang.Integer leaseCharge_leaseDocPosition;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink leaseChargeLink = null;
	public java.lang.Integer leasePayment_leaseDocPosition;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink leasePaymentLink = null;
	public java.math.BigDecimal chargesum;
	public java.math.BigDecimal chargerurrate;
	public java.math.BigDecimal chargerursum;
	public Boolean byhandchangeraterur;
	public java.math.BigDecimal payrursum;
	public String source;
	public java.lang.Integer act_leaseDocument;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink actLink = null;
	public Integer usedinact;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("leasePaymentKey", getLeasePaymentKey());
        h.put("chargerurrate", getChargerurrate());
        h.put("byhandchangeraterur", getByhandchangeraterur());
        h.put("payrursum", getPayrursum());
        h.put("actKey", getActKey());
        h.put("leaseChargeKey", getLeaseChargeKey());
        h.put("chargesum", getChargesum());
        h.put("usedinact", getUsedinact());
        h.put("source", getSource());
        h.put("chargerursum", getChargerursum());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.math.BigDecimal localChargerurrate = (java.math.BigDecimal) h.get("chargerurrate");
        java.lang.Boolean localByhandchangeraterur = (java.lang.Boolean) h.get("byhandchangeraterur");
        java.math.BigDecimal localPayrursum = (java.math.BigDecimal) h.get("payrursum");
        java.math.BigDecimal localChargesum = (java.math.BigDecimal) h.get("chargesum");
        java.lang.Integer localUsedinact = (java.lang.Integer) h.get("usedinact");
        java.lang.String localSource = (java.lang.String) h.get("source");
        java.math.BigDecimal localChargerursum = (java.math.BigDecimal) h.get("chargerursum");

        if ( h.containsKey("chargerurrate") )
            setChargerurrate((localChargerurrate));
        if ( h.containsKey("byhandchangeraterur") )
            setByhandchangeraterur((localByhandchangeraterur));
        if ( h.containsKey("payrursum") )
            setPayrursum((localPayrursum));
        if ( h.containsKey("chargesum") )
            setChargesum((localChargesum));
        if ( h.containsKey("usedinact") )
            setUsedinact((localUsedinact));
        if ( h.containsKey("source") )
            setSource((localSource));
        if ( h.containsKey("chargerursum") )
            setChargerursum((localChargerursum));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getLeaseChargeLink());
	links.addElement(getLeasePaymentLink());
	links.addElement(getActLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	leaseChargeLink = null;
	leasePaymentLink = null;
	actLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate( Integer argLeaseCharge, Integer argLeasePayment,
		java.math.BigDecimal argChargeSum, java.math.BigDecimal argPayRurSum,
		String argSource, Boolean argByHandChargeRateRur) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	leaseCharge_leaseDocPosition = argLeaseCharge;
	leasePayment_leaseDocPosition = argLeasePayment;
	chargesum = PersistenceUtil.dec(argChargeSum,2);
	payrursum = PersistenceUtil.dec(argPayRurSum,2);
	this.source = argSource;
	byhandchangeraterur = argByHandChargeRateRur;
	act_leaseDocument = null;
	chargerurrate = null;
	chargerursum = null;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argDnopCode java.lang.Integer
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(java.lang.Integer argDnopCode) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * This method was generated for supporting the association named LeaseDNOP2act.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.LeaseMutualActNew getAct() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.LeaseMutualActNew)this.getActLink().value();
}
/**
 * This method was generated for supporting the association named LeaseDNOP2act.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.LeaseDocumentKey getActKey() {
	com.hps.july.persistence.LeaseDocumentKey temp = null;
	temp = new com.hps.july.persistence.LeaseDocumentKey();
	boolean act_NULLTEST = true;
	act_NULLTEST &= (act_leaseDocument == null);
	temp.leaseDocument = ((act_leaseDocument == null) ? 0 : act_leaseDocument.intValue());
	if (act_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named LeaseDNOP2act.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getActLink() {
	if (actLink == null)
		actLink = new LeaseDNOPToActLink(this);
	return actLink;
}
/**
 * Getter method for byhandchangeraterur
 */
public java.lang.Boolean getByhandchangeraterur() {
	return byhandchangeraterur;
}
/**
 * Getter method for chargerurrate
 */
public java.math.BigDecimal getChargerurrate() {
	return chargerurrate;
}
/**
 * Getter method for chargerursum
 */
public java.math.BigDecimal getChargerursum() {
	return chargerursum;
}
/**
 * Getter method for chargesum
 */
public java.math.BigDecimal getChargesum() {
	return chargesum;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * This method was generated for supporting the association named LeaseDNOP2LeaseCharge.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.LeaseCharges getLeaseCharge() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.LeaseCharges)this.getLeaseChargeLink().value();
}
/**
 * This method was generated for supporting the association named LeaseDNOP2LeaseCharge.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.LeaseDocPositionKey getLeaseChargeKey() {
	com.hps.july.persistence.LeaseDocPositionKey temp = null;
	temp = new com.hps.july.persistence.LeaseDocPositionKey();
	boolean leaseCharge_NULLTEST = true;
	leaseCharge_NULLTEST &= (leaseCharge_leaseDocPosition == null);
	temp.leaseDocPosition = ((leaseCharge_leaseDocPosition == null) ? 0 : leaseCharge_leaseDocPosition.intValue());
	if (leaseCharge_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named LeaseDNOP2LeaseCharge.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getLeaseChargeLink() {
	if (leaseChargeLink == null)
		leaseChargeLink = new LeaseDNOPToLeaseChargeLink(this);
	return leaseChargeLink;
}
/**
 * This method was generated for supporting the association named LeaseDNOP2LeasePayment.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.LeasePayment getLeasePayment() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.LeasePayment)this.getLeasePaymentLink().value();
}
/**
 * This method was generated for supporting the association named LeaseDNOP2LeasePayment.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.LeaseDocPositionKey getLeasePaymentKey() {
	com.hps.july.persistence.LeaseDocPositionKey temp = null;
	temp = new com.hps.july.persistence.LeaseDocPositionKey();
	boolean leasePayment_NULLTEST = true;
	leasePayment_NULLTEST &= (leasePayment_leaseDocPosition == null);
	temp.leaseDocPosition = ((leasePayment_leaseDocPosition == null) ? 0 : leasePayment_leaseDocPosition.intValue());
	if (leasePayment_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named LeaseDNOP2LeasePayment.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getLeasePaymentLink() {
	if (leasePaymentLink == null)
		leasePaymentLink = new LeaseDNOPToLeasePaymentLink(this);
	return leasePaymentLink;
}
/**
 * Getter method for payrursum
 */
public java.math.BigDecimal getPayrursum() {
	return payrursum;
}
/**
 * Getter method for source
 */
public java.lang.String getSource() {
	return source;
}
/**
 * Getter method for usedinact
 */
public java.lang.Integer getUsedinact() {
	return usedinact;
}
/**
 * This method was generated for supporting the association named LeaseDNOP2act.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetActKey(com.hps.july.persistence.LeaseDocumentKey inKey) {
	boolean act_NULLTEST = (inKey == null);
	if (act_NULLTEST) act_leaseDocument = null; else act_leaseDocument = (new Integer(inKey.leaseDocument));
}
/**
 * This method was generated for supporting the association named LeaseDNOP2LeaseCharge.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetLeaseChargeKey(com.hps.july.persistence.LeaseDocPositionKey inKey) {
	boolean leaseCharge_NULLTEST = (inKey == null);
	if (leaseCharge_NULLTEST) leaseCharge_leaseDocPosition = null; else leaseCharge_leaseDocPosition = (new Integer(inKey.leaseDocPosition));
}
/**
 * This method was generated for supporting the association named LeaseDNOP2LeasePayment.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetLeasePaymentKey(com.hps.july.persistence.LeaseDocPositionKey inKey) {
	boolean leasePayment_NULLTEST = (inKey == null);
	if (leasePayment_NULLTEST) leasePayment_leaseDocPosition = null; else leasePayment_leaseDocPosition = (new Integer(inKey.leaseDocPosition));
}
/**
 * This method was generated for supporting the association named LeaseDNOP2act.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetAct(com.hps.july.persistence.LeaseMutualActNew anAct) throws java.rmi.RemoteException {
	this.getActLink().secondarySet(anAct);
}
/**
 * This method was generated for supporting the association named LeaseDNOP2act.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setAct(com.hps.july.persistence.LeaseMutualActNew anAct) throws java.rmi.RemoteException {
	this.getActLink().set(anAct);
}
/**
 * Setter method for byhandchangeraterur
 */
public void setByhandchangeraterur(java.lang.Boolean newValue) {
	this.byhandchangeraterur = newValue;
}
/**
 * Setter method for chargerurrate
 */
public void setChargerurrate(java.math.BigDecimal newValue) {
	this.chargerurrate = newValue;
}
/**
 * Setter method for chargerursum
 */
public void setChargerursum(java.math.BigDecimal newValue) {
	this.chargerursum = newValue;
}
/**
 * Setter method for chargesum
 */
public void setChargesum(java.math.BigDecimal newValue) {
	this.chargesum = newValue;
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * This method was generated for supporting the association named LeaseDNOP2LeaseCharge.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setLeaseCharge(com.hps.july.persistence.LeaseCharges aLeaseCharge) throws java.rmi.RemoteException {
	this.getLeaseChargeLink().set(aLeaseCharge);
}
/**
 * This method was generated for supporting the association named LeaseDNOP2LeasePayment.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setLeasePayment(com.hps.july.persistence.LeasePayment aLeasePayment) throws java.rmi.RemoteException {
	this.getLeasePaymentLink().set(aLeasePayment);
}
/**
 * Setter method for payrursum
 */
public void setPayrursum(java.math.BigDecimal newValue) {
	this.payrursum = newValue;
}
/**
 * Setter method for source
 */
public void setSource(java.lang.String newValue) {
	this.source = newValue;
}
/**
 * Setter method for usedinact
 */
public void setUsedinact(java.lang.Integer newValue) {
	this.usedinact = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
