package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Шапка журнала изменений
 */
public class ChangeLogBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	public String eventtype;
	public int logid;
	public int objid;
	public short objtype;
	public java.sql.Timestamp recdate;
	private final static long serialVersionUID = 3206093459760846163L;
	public java.lang.Integer people_man;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink peopleLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink changeLogDetailsesLink = null;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("recdate", getRecdate());
        h.put("objtype", new Short(getObjtype()));
        h.put("eventtype", getEventtype());
        h.put("objid", new Integer(getObjid()));
        h.put("logid", new Integer(getLogid()));
        h.put("peopleKey", getPeopleKey());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.sql.Timestamp localRecdate = (java.sql.Timestamp) h.get("recdate");
        Short localObjtype = (Short) h.get("objtype");
        java.lang.String localEventtype = (java.lang.String) h.get("eventtype");
        Integer localObjid = (Integer) h.get("objid");

        if ( h.containsKey("recdate") )
            setRecdate((localRecdate));
        if ( h.containsKey("objtype") )
            setObjtype((localObjtype).shortValue());
        if ( h.containsKey("eventtype") )
            setEventtype((localEventtype));
        if ( h.containsKey("objid") )
            setObjid((localObjid).intValue());

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getPeopleLink());
	links.addElement(getChangeLogDetailsesLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	peopleLink = null;
	changeLogDetailsesLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * This method was generated for supporting the association named ChangeLogDetails2log.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addChangeLogDetailses(com.hps.july.persistence.ChangeLogDetails aChangeLogDetailses) throws java.rmi.RemoteException {
	this.getChangeLogDetailsesLink().addElement(aChangeLogDetailses);
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argLogid int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argLogid, java.sql.Timestamp argRecdate, short argObjtype, int argObjid, 
		String argEventtype, int argMan) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	logid = argLogid;
	recdate = argRecdate;
	objtype = argObjtype;
	objid = argObjid;
	eventtype = argEventtype;
	people_man = new Integer(argMan);
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argLogid int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argLogid) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * This method was generated for supporting the association named ChangeLogDetails2log.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getChangeLogDetailses() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getChangeLogDetailsesLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named ChangeLogDetails2log.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getChangeLogDetailsesLink() {
	if (changeLogDetailsesLink == null)
		changeLogDetailsesLink = new ChangeLogToChangeLogDetailsesLink(this);
	return changeLogDetailsesLink;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * Getter method for eventtype
 * @return java.lang.String
 */
public java.lang.String getEventtype() {
	return eventtype;
}
/**
 * Insert the method's description here.
 * Creation date: (11.03.2003 16:45:02)
 * @return int
 */
public int getLogid() {
	return logid;
}
/**
 * Getter method for objid
 * @return int
 */
public int getObjid() {
	return objid;
}
/**
 * Getter method for objtype
 * @return short
 */
public short getObjtype() {
	return objtype;
}
/**
 * This method was generated for supporting the association named ChangeLog2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.People getPeople() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.People)this.getPeopleLink().value();
}
/**
 * This method was generated for supporting the association named ChangeLog2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.PeopleKey getPeopleKey() {
	com.hps.july.persistence.PeopleKey temp = null;
	temp = new com.hps.july.persistence.PeopleKey();
	boolean people_NULLTEST = true;
	people_NULLTEST &= (people_man == null);
	temp.man = ((people_man == null) ? 0 : people_man.intValue());
	if (people_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named ChangeLog2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getPeopleLink() {
	if (peopleLink == null)
		peopleLink = new ChangeLogToPeopleLink(this);
	return peopleLink;
}
/**
 * Getter method for recdate
 * @return java.sql.Timestamp
 */
public java.sql.Timestamp getRecdate() {
	return recdate;
}
/**
 * This method was generated for supporting the association named ChangeLog2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetPeopleKey(com.hps.july.persistence.PeopleKey inKey) {
	boolean people_NULLTEST = (inKey == null);
	if (people_NULLTEST) people_man = null; else people_man = (new Integer(inKey.man));
}
/**
 * This method was generated for supporting the association named ChangeLogDetails2log.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddChangeLogDetailses(com.hps.july.persistence.ChangeLogDetails aChangeLogDetailses) {
	this.getChangeLogDetailsesLink().secondaryAddElement(aChangeLogDetailses);
}
/**
 * This method was generated for supporting the association named ChangeLogDetails2log.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveChangeLogDetailses(com.hps.july.persistence.ChangeLogDetails aChangeLogDetailses) {
	this.getChangeLogDetailsesLink().secondaryRemoveElement(aChangeLogDetailses);
}
/**
 * This method was generated for supporting the association named ChangeLog2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetPeople(com.hps.july.persistence.People aPeople) throws java.rmi.RemoteException {
	this.getPeopleLink().secondarySet(aPeople);
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Setter method for eventtype
 * @param newValue java.lang.String
 */
public void setEventtype(java.lang.String newValue) {
	this.eventtype = newValue;
}
/**
 * Setter method for objid
 * @param newValue int
 */
public void setObjid(int newValue) {
	this.objid = newValue;
}
/**
 * Setter method for objtype
 * @param newValue short
 */
public void setObjtype(short newValue) {
	this.objtype = newValue;
}
/**
 * This method was generated for supporting the association named ChangeLog2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setPeople(com.hps.july.persistence.People aPeople) throws java.rmi.RemoteException {
	this.getPeopleLink().set(aPeople);
}
/**
 * Setter method for recdate
 * @param newValue java.sql.Timestamp
 */
public void setRecdate(java.sql.Timestamp newValue) {
	this.recdate = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
