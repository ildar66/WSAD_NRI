package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Доп. информация по платежам аренды
 */
public class DopInfoLPaymentBean implements EntityBean {
	public java.sql.Date datebeforepay;
	public java.sql.Date datebuch;
	private javax.ejb.EntityContext entityContext = null;
	public Integer idbudjet;
	public Integer idexpence;
	public Integer idpaymode;
	public Integer idpaytype;
	public int leasedocposition;
	public String numpayplatinum;
	public Integer paystateplatinum;
	public String purposepay;
	private final static long serialVersionUID = 3206093459760846163L;
	public Integer typeinstr;
	public Integer typerashod;
	public Integer typebasedoc;
	public String numberanddatebasedoc;
	public Integer otvuser;
	public Boolean isact;
	public Boolean isschet;
	public Boolean iskvitancia;
	public Boolean istovcheck;
	public Boolean iskassacheck;
	public java.math.BigDecimal percentavans;
	public Integer definerate;
	public java.sql.Timestamp datenritoplatinum;
	public java.sql.Timestamp dateplatinum;
	public String flagsync;
	public String fl101;
	public String fl104;
	public String fl105;
	public String fl106;
	public String fl107;
	public String fl108;
	public String fl109;
	public String fl110;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("fl106", getFl106());
        h.put("typebasedoc", getTypebasedoc());
        h.put("fl105", getFl105());
        h.put("fl104", getFl104());
        h.put("fl101", getFl101());
        h.put("idbudjet", getIdbudjet());
        h.put("typerashod", getTyperashod());
        h.put("iskvitancia", getIskvitancia());
        h.put("leasedocposition", new Integer(getLeasedocposition()));
        h.put("otvuser", getOtvuser());
        h.put("purposepay", getPurposepay());
        h.put("idpaymode", getIdpaymode());
        h.put("isschet", getIsschet());
        h.put("iskassacheck", getIskassacheck());
        h.put("paystateplatinum", getPaystateplatinum());
        h.put("typeinstr", getTypeinstr());
        h.put("datebeforepay", getDatebeforepay());
        h.put("idexpence", getIdexpence());
        h.put("datebuch", getDatebuch());
        h.put("numberanddatebasedoc", getNumberanddatebasedoc());
        h.put("fl110", getFl110());
        h.put("idpaytype", getIdpaytype());
        h.put("istovcheck", getIstovcheck());
        h.put("definerate", getDefinerate());
        h.put("flagsync", getFlagsync());
        h.put("numpayplatinum", getNumpayplatinum());
        h.put("dateplatinum", getDateplatinum());
        h.put("datenritoplatinum", getDatenritoplatinum());
        h.put("percentavans", getPercentavans());
        h.put("fl109", getFl109());
        h.put("isact", getIsact());
        h.put("fl108", getFl108());
        h.put("fl107", getFl107());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.lang.String localFl106 = (java.lang.String) h.get("fl106");
        java.lang.Integer localTypebasedoc = (java.lang.Integer) h.get("typebasedoc");
        java.lang.String localFl105 = (java.lang.String) h.get("fl105");
        java.lang.String localFl104 = (java.lang.String) h.get("fl104");
        java.lang.String localFl101 = (java.lang.String) h.get("fl101");
        java.lang.Integer localIdbudjet = (java.lang.Integer) h.get("idbudjet");
        java.lang.Integer localTyperashod = (java.lang.Integer) h.get("typerashod");
        java.lang.Boolean localIskvitancia = (java.lang.Boolean) h.get("iskvitancia");
        java.lang.Integer localOtvuser = (java.lang.Integer) h.get("otvuser");
        java.lang.String localPurposepay = (java.lang.String) h.get("purposepay");
        java.lang.Integer localIdpaymode = (java.lang.Integer) h.get("idpaymode");
        java.lang.Boolean localIsschet = (java.lang.Boolean) h.get("isschet");
        java.lang.Boolean localIskassacheck = (java.lang.Boolean) h.get("iskassacheck");
        java.lang.Integer localPaystateplatinum = (java.lang.Integer) h.get("paystateplatinum");
        java.lang.Integer localTypeinstr = (java.lang.Integer) h.get("typeinstr");
        java.sql.Date localDatebeforepay = (java.sql.Date) h.get("datebeforepay");
        java.lang.Integer localIdexpence = (java.lang.Integer) h.get("idexpence");
        java.sql.Date localDatebuch = (java.sql.Date) h.get("datebuch");
        java.lang.String localNumberanddatebasedoc = (java.lang.String) h.get("numberanddatebasedoc");
        java.lang.String localFl110 = (java.lang.String) h.get("fl110");
        java.lang.Integer localIdpaytype = (java.lang.Integer) h.get("idpaytype");
        java.lang.Boolean localIstovcheck = (java.lang.Boolean) h.get("istovcheck");
        java.lang.Integer localDefinerate = (java.lang.Integer) h.get("definerate");
        java.lang.String localFlagsync = (java.lang.String) h.get("flagsync");
        java.lang.String localNumpayplatinum = (java.lang.String) h.get("numpayplatinum");
        java.sql.Timestamp localDateplatinum = (java.sql.Timestamp) h.get("dateplatinum");
        java.sql.Timestamp localDatenritoplatinum = (java.sql.Timestamp) h.get("datenritoplatinum");
        java.math.BigDecimal localPercentavans = (java.math.BigDecimal) h.get("percentavans");
        java.lang.String localFl109 = (java.lang.String) h.get("fl109");
        java.lang.Boolean localIsact = (java.lang.Boolean) h.get("isact");
        java.lang.String localFl108 = (java.lang.String) h.get("fl108");
        java.lang.String localFl107 = (java.lang.String) h.get("fl107");

        if ( h.containsKey("fl106") )
            setFl106((localFl106));
        if ( h.containsKey("typebasedoc") )
            setTypebasedoc((localTypebasedoc));
        if ( h.containsKey("fl105") )
            setFl105((localFl105));
        if ( h.containsKey("fl104") )
            setFl104((localFl104));
        if ( h.containsKey("fl101") )
            setFl101((localFl101));
        if ( h.containsKey("idbudjet") )
            setIdbudjet((localIdbudjet));
        if ( h.containsKey("typerashod") )
            setTyperashod((localTyperashod));
        if ( h.containsKey("iskvitancia") )
            setIskvitancia((localIskvitancia));
        if ( h.containsKey("otvuser") )
            setOtvuser((localOtvuser));
        if ( h.containsKey("purposepay") )
            setPurposepay((localPurposepay));
        if ( h.containsKey("idpaymode") )
            setIdpaymode((localIdpaymode));
        if ( h.containsKey("isschet") )
            setIsschet((localIsschet));
        if ( h.containsKey("iskassacheck") )
            setIskassacheck((localIskassacheck));
        if ( h.containsKey("paystateplatinum") )
            setPaystateplatinum((localPaystateplatinum));
        if ( h.containsKey("typeinstr") )
            setTypeinstr((localTypeinstr));
        if ( h.containsKey("datebeforepay") )
            setDatebeforepay((localDatebeforepay));
        if ( h.containsKey("idexpence") )
            setIdexpence((localIdexpence));
        if ( h.containsKey("datebuch") )
            setDatebuch((localDatebuch));
        if ( h.containsKey("numberanddatebasedoc") )
            setNumberanddatebasedoc((localNumberanddatebasedoc));
        if ( h.containsKey("fl110") )
            setFl110((localFl110));
        if ( h.containsKey("idpaytype") )
            setIdpaytype((localIdpaytype));
        if ( h.containsKey("istovcheck") )
            setIstovcheck((localIstovcheck));
        if ( h.containsKey("definerate") )
            setDefinerate((localDefinerate));
        if ( h.containsKey("flagsync") )
            setFlagsync((localFlagsync));
        if ( h.containsKey("numpayplatinum") )
            setNumpayplatinum((localNumpayplatinum));
        if ( h.containsKey("dateplatinum") )
            setDateplatinum((localDateplatinum));
        if ( h.containsKey("datenritoplatinum") )
            setDatenritoplatinum((localDatenritoplatinum));
        if ( h.containsKey("percentavans") )
            setPercentavans((localPercentavans));
        if ( h.containsKey("fl109") )
            setFl109((localFl109));
        if ( h.containsKey("isact") )
            setIsact((localIsact));
        if ( h.containsKey("fl108") )
            setFl108((localFl108));
        if ( h.containsKey("fl107") )
            setFl107((localFl107));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argLeasedocposition int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argLeasedocposition) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	leasedocposition = argLeasedocposition;
	typebasedoc = null;
	numberanddatebasedoc = null;
	datebuch = null;
	datebeforepay = null;
	idbudjet = null;
	idexpence = null;
	idpaymode = null;
	definerate = null;
	idpaytype = null;
	typerashod = null;
	paystateplatinum = null;
	numpayplatinum = null;
	purposepay = null;
	typeinstr = null;
	otvuser = null;
	isact = null;
	isschet = null;
	iskvitancia = null;
	istovcheck = null;
	iskassacheck = null;
	percentavans = null;
	datenritoplatinum = null;
	dateplatinum = null;
	flagsync = "0";
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argLeasedocposition int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argLeasedocposition) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * Getter method for datebeforepay
 * @return java.sql.Date
 */
public java.sql.Date getDatebeforepay() {
	return datebeforepay;
}
/**
 * Getter method for datebuch
 * @return java.sql.Date
 */
public java.sql.Date getDatebuch() {
	return datebuch;
}
/**
 * Getter method for datenritoplatinum
 */
public java.sql.Timestamp getDatenritoplatinum() {
	return datenritoplatinum;
}
/**
 * Getter method for dateplatinum
 */
public java.sql.Timestamp getDateplatinum() {
	return dateplatinum;
}
/**
 * Getter method for definerate
 */
public java.lang.Integer getDefinerate() {
	return definerate;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * Getter method for fl101
 */
public java.lang.String getFl101() {
	return fl101;
}
/**
 * Getter method for fl104
 */
public java.lang.String getFl104() {
	return fl104;
}
/**
 * Getter method for fl105
 */
public java.lang.String getFl105() {
	return fl105;
}
/**
 * Getter method for fl106
 */
public java.lang.String getFl106() {
	return fl106;
}
/**
 * Getter method for fl107
 */
public java.lang.String getFl107() {
	return fl107;
}
/**
 * Getter method for fl108
 */
public java.lang.String getFl108() {
	return fl108;
}
/**
 * Getter method for fl109
 */
public java.lang.String getFl109() {
	return fl109;
}
/**
 * Getter method for fl110
 */
public java.lang.String getFl110() {
	return fl110;
}
/**
 * Getter method for flagsync
 */
public java.lang.String getFlagsync() {
	return flagsync;
}
/**
 * Getter method for idbudjet
 * @return java.lang.Integer
 */
public java.lang.Integer getIdbudjet() {
	return idbudjet;
}
/**
 * Getter method for idexpence
 * @return java.lang.Integer
 */
public java.lang.Integer getIdexpence() {
	return idexpence;
}
/**
 * Getter method for idpaymode
 * @return java.lang.Integer
 */
public java.lang.Integer getIdpaymode() {
	return idpaymode;
}
/**
 * Getter method for idpaytype
 * @return java.lang.Integer
 */
public java.lang.Integer getIdpaytype() {
	return idpaytype;
}
/**
 * Getter method for isact
 */
public java.lang.Boolean getIsact() {
	return isact;
}
/**
 * Getter method for iskassacheck
 */
public java.lang.Boolean getIskassacheck() {
	return iskassacheck;
}
/**
 * Getter method for iskvitancia
 */
public java.lang.Boolean getIskvitancia() {
	return iskvitancia;
}
/**
 * Getter method for isschet
 */
public java.lang.Boolean getIsschet() {
	return isschet;
}
/**
 * Getter method for istovcheck
 */
public java.lang.Boolean getIstovcheck() {
	return istovcheck;
}
/**
 * Insert the method's description here.
 * Creation date: (20.01.2003 14:33:26)
 * @return int
 */
public int getLeasedocposition() {
	return leasedocposition;
}
/**
 * Getter method for numberanddatebasedoc
 */
public java.lang.String getNumberanddatebasedoc() {
	return numberanddatebasedoc;
}
/**
 * Getter method for numpayplatinum
 * @return java.lang.String
 */
public java.lang.String getNumpayplatinum() {
	return numpayplatinum;
}
/**
 * Getter method for otvuser
 */
public java.lang.Integer getOtvuser() {
	return otvuser;
}
/**
 * Getter method for paystateplatinum
 * @return java.lang.Integer
 */
public java.lang.Integer getPaystateplatinum() {
	return paystateplatinum;
}
/**
 * Getter method for percentavans
 */
public java.math.BigDecimal getPercentavans() {
	return percentavans;
}
/**
 * Getter method for purposepay
 * @return java.lang.String
 */
public java.lang.String getPurposepay() {
	return purposepay;
}
/**
 * Getter method for typebasedoc
 */
public java.lang.Integer getTypebasedoc() {
	return typebasedoc;
}
/**
 * Getter method for typeinstr
 * @return java.lang.Integer
 */
public java.lang.Integer getTypeinstr() {
	return typeinstr;
}
/**
 * Getter method for typerashod
 * @return java.lang.Integer
 */
public java.lang.Integer getTyperashod() {
	return typerashod;
}
/**
 * Setter method for datebeforepay
 * @param newValue java.sql.Date
 */
public void setDatebeforepay(java.sql.Date newValue) {
	this.datebeforepay = newValue;
}
/**
 * Setter method for datebuch
 * @param newValue java.sql.Date
 */
public void setDatebuch(java.sql.Date newValue) {
	this.datebuch = newValue;
}
/**
 * Setter method for datenritoplatinum
 */
public void setDatenritoplatinum(java.sql.Timestamp newValue) {
	this.datenritoplatinum = newValue;
}
/**
 * Setter method for dateplatinum
 */
public void setDateplatinum(java.sql.Timestamp newValue) {
	this.dateplatinum = newValue;
}
/**
 * Setter method for definerate
 */
public void setDefinerate(java.lang.Integer newValue) {
	this.definerate = newValue;
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Setter method for fl101
 */
public void setFl101(java.lang.String newValue) {
	this.fl101 = newValue;
}
/**
 * Setter method for fl104
 */
public void setFl104(java.lang.String newValue) {
	this.fl104 = newValue;
}
/**
 * Setter method for fl105
 */
public void setFl105(java.lang.String newValue) {
	this.fl105 = newValue;
}
/**
 * Setter method for fl106
 */
public void setFl106(java.lang.String newValue) {
	this.fl106 = newValue;
}
/**
 * Setter method for fl107
 */
public void setFl107(java.lang.String newValue) {
	this.fl107 = newValue;
}
/**
 * Setter method for fl108
 */
public void setFl108(java.lang.String newValue) {
	this.fl108 = newValue;
}
/**
 * Setter method for fl109
 */
public void setFl109(java.lang.String newValue) {
	this.fl109 = newValue;
}
/**
 * Setter method for fl110
 */
public void setFl110(java.lang.String newValue) {
	this.fl110 = newValue;
}
/**
 * Setter method for flagsync
 */
public void setFlagsync(java.lang.String newValue) {
	this.flagsync = newValue;
}
/**
 * Setter method for idbudjet
 * @param newValue java.lang.Integer
 */
public void setIdbudjet(java.lang.Integer newValue) {
	this.idbudjet = newValue;
}
/**
 * Setter method for idexpence
 * @param newValue java.lang.Integer
 */
public void setIdexpence(java.lang.Integer newValue) {
	this.idexpence = newValue;
}
/**
 * Setter method for idpaymode
 * @param newValue java.lang.Integer
 */
public void setIdpaymode(java.lang.Integer newValue) {
	this.idpaymode = newValue;
}
/**
 * Setter method for idpaytype
 * @param newValue java.lang.Integer
 */
public void setIdpaytype(java.lang.Integer newValue) {
	this.idpaytype = newValue;
}
/**
 * Setter method for isact
 */
public void setIsact(java.lang.Boolean newValue) {
	this.isact = newValue;
}
/**
 * Setter method for iskassacheck
 */
public void setIskassacheck(java.lang.Boolean newValue) {
	this.iskassacheck = newValue;
}
/**
 * Setter method for iskvitancia
 */
public void setIskvitancia(java.lang.Boolean newValue) {
	this.iskvitancia = newValue;
}
/**
 * Setter method for isschet
 */
public void setIsschet(java.lang.Boolean newValue) {
	this.isschet = newValue;
}
/**
 * Setter method for istovcheck
 */
public void setIstovcheck(java.lang.Boolean newValue) {
	this.istovcheck = newValue;
}
/**
 * Setter method for numberanddatebasedoc
 */
public void setNumberanddatebasedoc(java.lang.String newValue) {
	this.numberanddatebasedoc = newValue;
}
/**
 * Setter method for numpayplatinum
 * @param newValue java.lang.String
 */
public void setNumpayplatinum(java.lang.String newValue) {
	this.numpayplatinum = newValue;
}
/**
 * Setter method for otvuser
 */
public void setOtvuser(java.lang.Integer newValue) {
	this.otvuser = newValue;
}
/**
 * Setter method for paystateplatinum
 * @param newValue java.lang.Integer
 */
public void setPaystateplatinum(java.lang.Integer newValue) {
	this.paystateplatinum = newValue;
}
/**
 * Setter method for percentavans
 */
public void setPercentavans(java.math.BigDecimal newValue) {
	this.percentavans = newValue;
}
/**
 * Setter method for purposepay
 * @param newValue java.lang.String
 */
public void setPurposepay(java.lang.String newValue) {
	this.purposepay = newValue;
}
/**
 * Setter method for typebasedoc
 */
public void setTypebasedoc(java.lang.Integer newValue) {
	this.typebasedoc = newValue;
}
/**
 * Setter method for typeinstr
 * @param newValue java.lang.Integer
 */
public void setTypeinstr(java.lang.Integer newValue) {
	this.typeinstr = newValue;
}
/**
 * Setter method for typerashod
 * @param newValue java.lang.Integer
 */
public void setTyperashod(java.lang.Integer newValue) {
	this.typerashod = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
