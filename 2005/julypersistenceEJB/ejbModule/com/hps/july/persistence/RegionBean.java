package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Регион
 */
public class RegionBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	public int regionid;
	public String regname;
	public java.math.BigDecimal sectorprefix;
	private final static long serialVersionUID = 3206093459760846163L;
	public java.lang.Integer superregion_supregid;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink superregionLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink positionsLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink regionAccsLink = null;
	public Boolean hasmap;
	public boolean fullarendainfo;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("superregionKey", getSuperregionKey());
        h.put("fullarendainfo", new Boolean(getFullarendainfo()));
        h.put("hasmap", getHasmap());
        h.put("regname", getRegname());
        h.put("regionid", new Integer(getRegionid()));
        h.put("sectorprefix", getSectorprefix());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        Boolean localFullarendainfo = (Boolean) h.get("fullarendainfo");
        java.lang.Boolean localHasmap = (java.lang.Boolean) h.get("hasmap");
        java.lang.String localRegname = (java.lang.String) h.get("regname");
        java.math.BigDecimal localSectorprefix = (java.math.BigDecimal) h.get("sectorprefix");

        if ( h.containsKey("fullarendainfo") )
            setFullarendainfo((localFullarendainfo).booleanValue());
        if ( h.containsKey("hasmap") )
            setHasmap((localHasmap));
        if ( h.containsKey("regname") )
            setRegname((localRegname));
        if ( h.containsKey("sectorprefix") )
            setSectorprefix((localSectorprefix));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getSuperregionLink());
	links.addElement(getPositionsLink());
	links.addElement(getRegionAccsLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	superregionLink = null;
	positionsLink = null;
	regionAccsLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * This method was generated for supporting the association named Position2region.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addPositions(com.hps.july.persistence.Position aPositions) throws java.rmi.RemoteException {
	this.getPositionsLink().addElement(aPositions);
}
/**
 * This method was generated for supporting the association named RegionAcc2region.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addRegionAccs(com.hps.july.persistence.RegionAcc aRegionAccs) throws java.rmi.RemoteException {
	this.getRegionAccsLink().addElement(aRegionAccs);
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argRegionid int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argRegionid, int argSupregid, String argRegName, java.math.BigDecimal argSectorPrefix) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	regionid = argRegionid;
	superregion_supregid = new Integer(argSupregid);
	regname = argRegName;
	sectorprefix = argSectorPrefix;
	hasmap = Boolean.FALSE;
	fullarendainfo = false;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argRegionid int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argRegionid) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * Getter method for fullarendainfo
 */
public boolean getFullarendainfo() {
	return fullarendainfo;
}
/**
 * Getter method for hasmap
 */
public java.lang.Boolean getHasmap() {
	return hasmap;
}
/**
 * This method was generated for supporting the association named Position2region.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getPositions() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getPositionsLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named Position2region.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getPositionsLink() {
	if (positionsLink == null)
		positionsLink = new RegionToPositionsLink(this);
	return positionsLink;
}
/**
 * This method was generated for supporting the association named RegionAcc2region.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getRegionAccs() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getRegionAccsLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named RegionAcc2region.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getRegionAccsLink() {
	if (regionAccsLink == null)
		regionAccsLink = new RegionToRegionAccsLink(this);
	return regionAccsLink;
}
/**
 * Insert the method's description here.
 * Creation date: (10.02.2003 13:13:11)
 * @return int
 */
public int getRegionid() {
	return regionid;
}
/**
 * Getter method for regname
 * @return java.lang.String
 */
public java.lang.String getRegname() {
	return regname;
}
/**
 * Getter method for sectorprefix
 * @return java.math.BigDecimal
 */
public java.math.BigDecimal getSectorprefix() {
	return sectorprefix;
}
/**
 * This method was generated for supporting the association named Region2superregion.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.SuperRegion getSuperregion() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.SuperRegion)this.getSuperregionLink().value();
}
/**
 * This method was generated for supporting the association named Region2superregion.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.SuperRegionKey getSuperregionKey() {
	com.hps.july.persistence.SuperRegionKey temp = null;
	temp = new com.hps.july.persistence.SuperRegionKey();
	boolean superregion_NULLTEST = true;
	superregion_NULLTEST &= (superregion_supregid == null);
	temp.supregid = ((superregion_supregid == null) ? 0 : superregion_supregid.intValue());
	if (superregion_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named Region2superregion.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getSuperregionLink() {
	if (superregionLink == null)
		superregionLink = new RegionToSuperregionLink(this);
	return superregionLink;
}
/**
 * This method was generated for supporting the association named Region2superregion.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetSuperregionKey(com.hps.july.persistence.SuperRegionKey inKey) {
	boolean superregion_NULLTEST = (inKey == null);
	if (superregion_NULLTEST) superregion_supregid = null; else superregion_supregid = (new Integer(inKey.supregid));
}
/**
 * This method was generated for supporting the association named Position2region.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddPositions(com.hps.july.persistence.Position aPositions) {
	this.getPositionsLink().secondaryAddElement(aPositions);
}
/**
 * This method was generated for supporting the association named RegionAcc2region.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddRegionAccs(com.hps.july.persistence.RegionAcc aRegionAccs) {
	this.getRegionAccsLink().secondaryAddElement(aRegionAccs);
}
/**
 * This method was generated for supporting the association named Position2region.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemovePositions(com.hps.july.persistence.Position aPositions) {
	this.getPositionsLink().secondaryRemoveElement(aPositions);
}
/**
 * This method was generated for supporting the association named RegionAcc2region.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveRegionAccs(com.hps.july.persistence.RegionAcc aRegionAccs) {
	this.getRegionAccsLink().secondaryRemoveElement(aRegionAccs);
}
/**
 * This method was generated for supporting the association named Region2superregion.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetSuperregion(com.hps.july.persistence.SuperRegion aSuperregion) throws java.rmi.RemoteException {
	this.getSuperregionLink().secondarySet(aSuperregion);
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Setter method for fullarendainfo
 */
public void setFullarendainfo(boolean newValue) {
	this.fullarendainfo = newValue;
}
/**
 * Setter method for hasmap
 */
public void setHasmap(java.lang.Boolean newValue) {
	this.hasmap = newValue;
}
/**
 * Setter method for regname
 * @param newValue java.lang.String
 */
public void setRegname(java.lang.String newValue) {
	this.regname = newValue;
}
/**
 * Setter method for sectorprefix
 * @param newValue java.math.BigDecimal
 */
public void setSectorprefix(java.math.BigDecimal newValue) {
	this.sectorprefix = newValue;
}
/**
 * This method was generated for supporting the association named Region2superregion.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setSuperregion(com.hps.july.persistence.SuperRegion aSuperregion) throws java.rmi.RemoteException {
	this.getSuperregionLink().set(aSuperregion);
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
