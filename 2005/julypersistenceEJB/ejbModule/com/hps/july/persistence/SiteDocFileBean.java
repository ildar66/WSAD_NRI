package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Файл документа позиции опорной сети
 */
public class SiteDocFileBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	public String note;
	private final static long serialVersionUID = 3206093459760846163L;
	public int sitedocfile;
	public String sitedocfilename;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink siteDocLink = null;
	public java.lang.Integer siteDoc_sitedoc;
	public Integer filesize;
	public java.sql.Date sitedocfiledate;
	public java.sql.Timestamp filecreated;
	public java.sql.Timestamp filemodified;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("filemodified", getFilemodified());
        h.put("filecreated", getFilecreated());
        h.put("sitedocfile", new Integer(getSitedocfile()));
        h.put("sitedocfilename", getSitedocfilename());
        h.put("siteDocKey", getSiteDocKey());
        h.put("note", getNote());
        h.put("filesize", getFilesize());
        h.put("sitedocfiledate", getSitedocfiledate());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.sql.Timestamp localFilemodified = (java.sql.Timestamp) h.get("filemodified");
        java.sql.Timestamp localFilecreated = (java.sql.Timestamp) h.get("filecreated");
        java.lang.String localSitedocfilename = (java.lang.String) h.get("sitedocfilename");
        java.lang.String localNote = (java.lang.String) h.get("note");
        java.lang.Integer localFilesize = (java.lang.Integer) h.get("filesize");
        java.sql.Date localSitedocfiledate = (java.sql.Date) h.get("sitedocfiledate");

        if ( h.containsKey("filemodified") )
            setFilemodified((localFilemodified));
        if ( h.containsKey("filecreated") )
            setFilecreated((localFilecreated));
        if ( h.containsKey("sitedocfilename") )
            setSitedocfilename((localSitedocfilename));
        if ( h.containsKey("note") )
            setNote((localNote));
        if ( h.containsKey("filesize") )
            setFilesize((localFilesize));
        if ( h.containsKey("sitedocfiledate") )
            setSitedocfiledate((localSitedocfiledate));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getSiteDocLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	siteDocLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argSitedocfile int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argSitedocfile, int siteDoc) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	sitedocfile = argSitedocfile;
	siteDoc_sitedoc = new Integer(siteDoc);
	sitedocfiledate = null;	
	sitedocfilename = null;
	note = null;
	filesize = null;
	filecreated = null;
	filemodified = null;
}
	
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argSitedocfile int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argSitedocfile) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * Getter method for filecreated
 */
public java.sql.Timestamp getFilecreated() {
	return filecreated;
}
/**
 * Getter method for filemodified
 */
public java.sql.Timestamp getFilemodified() {
	return filemodified;
}
/**
 * Getter method for filesize
 */
public java.lang.Integer getFilesize() {
	return filesize;
}
/**
 * Getter method for note
 * @return java.lang.String
 */
public java.lang.String getNote() {
	return note;
}
/**
 * This method was generated for supporting the association named SiteDocFile2SiteDocs.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.SiteDoc getSiteDoc() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.SiteDoc)this.getSiteDocLink().value();
}
/**
 * Insert the method's description here.
 * Creation date: (14.05.2003 13:34:52)
 * @return int
 */
public int getSitedocfile() {
	return sitedocfile;
}
/**
 * Getter method for sitedocfiledate
 */
public java.sql.Date getSitedocfiledate() {
	return sitedocfiledate;
}
/**
 * Getter method for sitedocfilename
 * @return java.lang.String
 */
public java.lang.String getSitedocfilename() {
	return sitedocfilename;
}
/**
 * This method was generated for supporting the association named SiteDocFile2SiteDocs.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.SiteDocKey getSiteDocKey() {
	com.hps.july.persistence.SiteDocKey temp = null;
	temp = new com.hps.july.persistence.SiteDocKey();
	boolean siteDoc_NULLTEST = true;
	siteDoc_NULLTEST &= (siteDoc_sitedoc == null);
	temp.sitedoc = ((siteDoc_sitedoc == null) ? 0 : siteDoc_sitedoc.intValue());
	if (siteDoc_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named SiteDocFile2SiteDocs.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getSiteDocLink() {
	if (siteDocLink == null)
		siteDocLink = new SiteDocFileToSiteDocLink(this);
	return siteDocLink;
}
/**
 * This method was generated for supporting the association named SiteDocFile2SiteDocs.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetSiteDocKey(com.hps.july.persistence.SiteDocKey inKey) {
	boolean siteDoc_NULLTEST = (inKey == null);
	if (siteDoc_NULLTEST) siteDoc_sitedoc = null; else siteDoc_sitedoc = (new Integer(inKey.sitedoc));
}
/**
 * This method was generated for supporting the association named SiteDocFile2SiteDocs.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetSiteDoc(com.hps.july.persistence.SiteDoc aSiteDoc) throws java.rmi.RemoteException {
	this.getSiteDocLink().secondarySet(aSiteDoc);
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Setter method for filecreated
 */
public void setFilecreated(java.sql.Timestamp newValue) {
	this.filecreated = newValue;
}
/**
 * Setter method for filemodified
 */
public void setFilemodified(java.sql.Timestamp newValue) {
	this.filemodified = newValue;
}
/**
 * Setter method for filesize
 */
public void setFilesize(java.lang.Integer newValue) {
	this.filesize = newValue;
}
/**
 * Setter method for note
 * @param newValue java.lang.String
 */
public void setNote(java.lang.String newValue) {
	this.note = newValue;
}
/**
 * This method was generated for supporting the association named SiteDocFile2SiteDocs.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setSiteDoc(com.hps.july.persistence.SiteDoc aSiteDoc) throws java.rmi.RemoteException {
	this.getSiteDocLink().set(aSiteDoc);
}
/**
 * Setter method for sitedocfiledate
 */
public void setSitedocfiledate(java.sql.Date newValue) {
	this.sitedocfiledate = newValue;
}
/**
 * Setter method for sitedocfilename
 * @param newValue java.lang.String
 */
public void setSitedocfilename(java.lang.String newValue) {
	this.sitedocfilename = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
