package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Документ плана-графика
 */
public class ProjectActionDocumentBean implements EntityBean {
	public String docname;
	private javax.ejb.EntityContext entityContext = null;
	public int projectactiondocument;
	private final static long serialVersionUID = 3206093459760846163L;
	public byte[] docbody;
	public java.lang.Integer projectaction_projectaction;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink projectactionLink = null;
	public java.sql.Date docdate;
	public String notes;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("projectactionKey", getProjectactionKey());
        h.put("docbody", getDocbody());
        h.put("docname", getDocname());
        h.put("notes", getNotes());
        h.put("projectactiondocument", new Integer(getProjectactiondocument()));
        h.put("docdate", getDocdate());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        byte[] localDocbody = (byte[]) h.get("docbody");
        java.lang.String localDocname = (java.lang.String) h.get("docname");
        java.lang.String localNotes = (java.lang.String) h.get("notes");
        java.sql.Date localDocdate = (java.sql.Date) h.get("docdate");

        if ( h.containsKey("docbody") )
            setDocbody((localDocbody));
        if ( h.containsKey("docname") )
            setDocname((localDocname));
        if ( h.containsKey("notes") )
            setNotes((localNotes));
        if ( h.containsKey("docdate") )
            setDocdate((localDocdate));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getProjectactionLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	projectactionLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argProjectactiondocument int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argProjectactiondocument, int argProjectAction, java.sql.Date argDate) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	projectactiondocument = argProjectactiondocument;
	projectaction_projectaction = new Integer(argProjectAction);
	docdate = argDate;
	docname = null;
	docbody = null;
	notes = null;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argProjectactiondocument int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argProjectactiondocument) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * Getter method for docbody
 */
public byte[] getDocbody() {
	return docbody;
}
/**
 * Getter method for docdate
 */
public java.sql.Date getDocdate() {
	return docdate;
}
/**
 * Getter method for docname
 * @return java.lang.String
 */
public java.lang.String getDocname() {
	return docname;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * Getter method for notes
 */
public java.lang.String getNotes() {
	return notes;
}
/**
 * This method was generated for supporting the association named ProjectActionDocument2action.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.ProjectAction getProjectaction() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.ProjectAction)this.getProjectactionLink().value();
}
/**
 * Insert the method's description here.
 * Creation date: (25.12.2002 10:02:21)
 * @return int
 */
public int getProjectactiondocument() {
	return projectactiondocument;
}
/**
 * This method was generated for supporting the association named ProjectActionDocument2action.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.ProjectActionKey getProjectactionKey() {
	com.hps.july.persistence.ProjectActionKey temp = null;
	temp = new com.hps.july.persistence.ProjectActionKey();
	boolean projectaction_NULLTEST = true;
	projectaction_NULLTEST &= (projectaction_projectaction == null);
	temp.projectaction = ((projectaction_projectaction == null) ? 0 : projectaction_projectaction.intValue());
	if (projectaction_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named ProjectActionDocument2action.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getProjectactionLink() {
	if (projectactionLink == null)
		projectactionLink = new ProjectActionDocumentToProjectactionLink(this);
	return projectactionLink;
}
/**
 * This method was generated for supporting the association named ProjectActionDocument2action.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetProjectactionKey(com.hps.july.persistence.ProjectActionKey inKey) {
	boolean projectaction_NULLTEST = (inKey == null);
	if (projectaction_NULLTEST) projectaction_projectaction = null; else projectaction_projectaction = (new Integer(inKey.projectaction));
}
/**
 * This method was generated for supporting the association named ProjectActionDocument2action.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetProjectaction(com.hps.july.persistence.ProjectAction aProjectaction) throws java.rmi.RemoteException {
	this.getProjectactionLink().secondarySet(aProjectaction);
}
/**
 * Setter method for docbody
 */
public void setDocbody(byte[] newValue) {
	this.docbody = newValue;
}
/**
 * Setter method for docdate
 */
public void setDocdate(java.sql.Date newValue) {
	this.docdate = newValue;
}
/**
 * Setter method for docname
 * @param newValue java.lang.String
 */
public void setDocname(java.lang.String newValue) {
	this.docname = newValue;
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Setter method for notes
 */
public void setNotes(java.lang.String newValue) {
	this.notes = newValue;
}
/**
 * This method was generated for supporting the association named ProjectActionDocument2action.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setProjectaction(com.hps.july.persistence.ProjectAction aProjectaction) throws java.rmi.RemoteException {
	this.getProjectactionLink().set(aProjectaction);
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
