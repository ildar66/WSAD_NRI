package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Журнал операций с документами
 */
public class DocumentActionBean implements EntityBean {
	public int docAction;
	private javax.ejb.EntityContext entityContext = null;
	private final static long serialVersionUID = 3206093459760846163L;
	public String type;
	public String what;
	public java.sql.Timestamp when;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink operatorLink = null;
	public java.lang.Integer operator_operator;
	public int document;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("operatorKey", getOperatorKey());
        h.put("when", getWhen());
        h.put("what", getWhat());
        h.put("document", new Integer(getDocument()));
        h.put("docAction", new Integer(getDocAction()));
        h.put("type", getType());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.sql.Timestamp localWhen = (java.sql.Timestamp) h.get("when");
        java.lang.String localWhat = (java.lang.String) h.get("what");
        Integer localDocument = (Integer) h.get("document");
        Integer localDocAction = (Integer) h.get("docAction");
        java.lang.String localType = (java.lang.String) h.get("type");

        if ( h.containsKey("when") )
            setWhen((localWhen));
        if ( h.containsKey("what") )
            setWhat((localWhat));
        if ( h.containsKey("document") )
            setDocument((localDocument).intValue());
        if ( h.containsKey("docAction") )
            setDocAction((localDocAction).intValue());
        if ( h.containsKey("type") )
            setType((localType));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getOperatorLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	operatorLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argDocAction int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argDocAction, Integer argDocument, java.sql.Timestamp argWhen
	) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.

	docAction = argDocAction;
	document = argDocument.intValue();
	when = argWhen;
	operator_operator = null;
	type = null;
	what = null;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argDocAction int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argDocAction) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * Insert the method's description here.
 * Creation date: (16.05.2002 10:18:18)
 * @return int
 */
public int getDocAction() {
	return docAction;
}
/**
 * Getter method for document
 */
public int getDocument() {
	return document;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * This method was generated for supporting the association named DocumentAction2Operators.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.Operator getOperator() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.Operator)this.getOperatorLink().value();
}
/**
 * This method was generated for supporting the association named DocumentAction2Operator.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.OperatorKey getOperatorKey() {
	com.hps.july.persistence.OperatorKey temp = null;
	temp = new com.hps.july.persistence.OperatorKey();
	boolean operator_NULLTEST = true;
	operator_NULLTEST &= (operator_operator == null);
	temp.operator = ((operator_operator == null) ? 0 : operator_operator.intValue());
	if (operator_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named DocumentAction2Operators.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getOperatorLink() {
	if (operatorLink == null)
		operatorLink = new DocumentActionToOperatorLink(this);
	return operatorLink;
}
/**
 * Insert the method's description here.
 * Creation date: (21.06.2003 19:10:51)
 * @return java.lang.String
 */
public java.lang.String getType() {
	return type;
}
/**
 * Getter method for what
 * @return java.lang.String
 */
public java.lang.String getWhat() {
	return what;
}
/**
 * Getter method for when
 * @return java.sql.Timestamp
 */
public java.sql.Timestamp getWhen() {
	return when;
}
/**
 * This method was generated for supporting the association named DocumentAction2Operator.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetOperatorKey(com.hps.july.persistence.OperatorKey inKey) {
	boolean operator_NULLTEST = (inKey == null);
	if (operator_NULLTEST) operator_operator = null; else operator_operator = (new Integer(inKey.operator));
}
/**
 * This method was generated for supporting the association named DocumentAction2Operators.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetOperator(com.hps.july.persistence.Operator anOperator) throws java.rmi.RemoteException {
	this.getOperatorLink().secondarySet(anOperator);
}
/**
 * Insert the method's description here.
 * Creation date: (16.05.2002 10:18:18)
 * @param newDocAction int
 */
public void setDocAction(int newDocAction) {
	docAction = newDocAction;
}
/**
 * Setter method for document
 */
public void setDocument(int newValue) {
	this.document = newValue;
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * This method was generated for supporting the association named DocumentAction2Operators.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setOperator(com.hps.july.persistence.Operator anOperator) throws java.rmi.RemoteException {
	this.getOperatorLink().set(anOperator);
}
/**
 * Insert the method's description here.
 * Creation date: (21.06.2003 19:10:51)
 * @param newType java.lang.String
 */
public void setType(java.lang.String newType) {
	type = newType;
}
/**
 * Setter method for what
 * @param newValue java.lang.String
 */
public void setWhat(java.lang.String newValue) {
	this.what = newValue;
}
/**
 * Setter method for when
 * @param newValue java.sql.Timestamp
 */
public void setWhen(java.sql.Timestamp newValue) {
	this.when = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
