package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * «апись начала/окнчани€ выполнени€ задачи
 */
public class LeaseTaskStartBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	private final static long serialVersionUID = 3206093459760846163L;
	public int taskstart;
	public String tasktype;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink start2journalLink = null;
	public java.sql.Timestamp startdate;
	public java.sql.Timestamp enddate;
	public java.sql.Date date1;
	public java.sql.Date date2;
	public java.lang.Integer startOperator_operator;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink startOperatorLink = null;
	public java.lang.Integer economistWorker_worker;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink economistWorkerLink = null;
	public java.lang.Integer leasedocument_leaseDocument;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink leasedocumentLink = null;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("economistWorkerKey", getEconomistWorkerKey());
        h.put("tasktype", getTasktype());
        h.put("enddate", getEnddate());
        h.put("date2", getDate2());
        h.put("date1", getDate1());
        h.put("startOperatorKey", getStartOperatorKey());
        h.put("taskstart", new Integer(getTaskstart()));
        h.put("startdate", getStartdate());
        h.put("leasedocumentKey", getLeasedocumentKey());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.lang.String localTasktype = (java.lang.String) h.get("tasktype");
        java.sql.Timestamp localEnddate = (java.sql.Timestamp) h.get("enddate");
        java.sql.Date localDate2 = (java.sql.Date) h.get("date2");
        java.sql.Date localDate1 = (java.sql.Date) h.get("date1");
        java.sql.Timestamp localStartdate = (java.sql.Timestamp) h.get("startdate");

        if ( h.containsKey("tasktype") )
            setTasktype((localTasktype));
        if ( h.containsKey("enddate") )
            setEnddate((localEnddate));
        if ( h.containsKey("date2") )
            setDate2((localDate2));
        if ( h.containsKey("date1") )
            setDate1((localDate1));
        if ( h.containsKey("startdate") )
            setStartdate((localStartdate));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getStartOperatorLink());
	links.addElement(getStart2journalLink());
	links.addElement(getEconomistWorkerLink());
	links.addElement(getLeasedocumentLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	startOperatorLink = null;
	start2journalLink = null;
	economistWorkerLink = null;
	leasedocumentLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * This method was generated for supporting the association named LeaseTaskJournal2TaskStart.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addStart2journal(com.hps.july.persistence.LeaseTaskJournal aStart2journal) throws java.rmi.RemoteException {
	this.getStart2journalLink().addElement(aStart2journal);
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argTaskstart int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argTaskstart) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	taskstart = argTaskstart;
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argTaskstart int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argTaskStart, java.sql.Timestamp argStartDate, 
	int argWorker, java.lang.String argTaskType) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	taskstart = argTaskStart;
	startdate = argStartDate;
	startOperator_operator = new Integer(argWorker);
	tasktype = argTaskType;
	enddate = null;
	date1 = null;
	date2 = null;
	economistWorker_worker = null;
	leasedocument_leaseDocument = null;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argTaskstart int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argTaskstart) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * Getter method for date1
 */
public java.sql.Date getDate1() {
	return date1;
}
/**
 * Getter method for date2
 */
public java.sql.Date getDate2() {
	return date2;
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2Economist.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.Worker getEconomistWorker() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.Worker)this.getEconomistWorkerLink().value();
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2Economist.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.WorkerKey getEconomistWorkerKey() {
	com.hps.july.persistence.WorkerKey temp = null;
	temp = new com.hps.july.persistence.WorkerKey();
	boolean economistWorker_NULLTEST = true;
	economistWorker_NULLTEST &= (economistWorker_worker == null);
	temp.worker = ((economistWorker_worker == null) ? 0 : economistWorker_worker.intValue());
	if (economistWorker_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2Economist.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getEconomistWorkerLink() {
	if (economistWorkerLink == null)
		economistWorkerLink = new LeaseTaskStartToEconomistWorkerLink(this);
	return economistWorkerLink;
}
/**
 * Getter method for enddate
 */
public java.sql.Timestamp getEnddate() {
	return enddate;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.LeaseDocument getLeasedocument() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.LeaseDocument)this.getLeasedocumentLink().value();
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.LeaseDocumentKey getLeasedocumentKey() {
	com.hps.july.persistence.LeaseDocumentKey temp = null;
	temp = new com.hps.july.persistence.LeaseDocumentKey();
	boolean leasedocument_NULLTEST = true;
	leasedocument_NULLTEST &= (leasedocument_leaseDocument == null);
	temp.leaseDocument = ((leasedocument_leaseDocument == null) ? 0 : leasedocument_leaseDocument.intValue());
	if (leasedocument_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getLeasedocumentLink() {
	if (leasedocumentLink == null)
		leasedocumentLink = new LeaseTaskStartToLeasedocumentLink(this);
	return leasedocumentLink;
}
/**
 * This method was generated for supporting the association named LeaseTaskJournal2TaskStart.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getStart2journal() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getStart2journalLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named LeaseTaskJournal2TaskStart.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getStart2journalLink() {
	if (start2journalLink == null)
		start2journalLink = new LeaseTaskStartToStart2journalLink(this);
	return start2journalLink;
}
/**
 * Getter method for startdate
 */
public java.sql.Timestamp getStartdate() {
	return startdate;
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2Operator.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.Operator getStartOperator() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.Operator)this.getStartOperatorLink().value();
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2Operator.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.OperatorKey getStartOperatorKey() {
	com.hps.july.persistence.OperatorKey temp = null;
	temp = new com.hps.july.persistence.OperatorKey();
	boolean startOperator_NULLTEST = true;
	startOperator_NULLTEST &= (startOperator_operator == null);
	temp.operator = ((startOperator_operator == null) ? 0 : startOperator_operator.intValue());
	if (startOperator_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2Operator.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getStartOperatorLink() {
	if (startOperatorLink == null)
		startOperatorLink = new LeaseTaskStartToStartOperatorLink(this);
	return startOperatorLink;
}
/**
 * Insert the method's description here.
 * Creation date: (26.09.2002 14:52:18)
 * @return int
 */
public int getTaskstart() {
	return taskstart;
}
/**
 * Getter method for tasktype
 */
public java.lang.String getTasktype() {
	return tasktype;
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2Economist.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetEconomistWorkerKey(com.hps.july.persistence.WorkerKey inKey) {
	boolean economistWorker_NULLTEST = (inKey == null);
	if (economistWorker_NULLTEST) economistWorker_worker = null; else economistWorker_worker = (new Integer(inKey.worker));
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetLeasedocumentKey(com.hps.july.persistence.LeaseDocumentKey inKey) {
	boolean leasedocument_NULLTEST = (inKey == null);
	if (leasedocument_NULLTEST) leasedocument_leaseDocument = null; else leasedocument_leaseDocument = (new Integer(inKey.leaseDocument));
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2Operator.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetStartOperatorKey(com.hps.july.persistence.OperatorKey inKey) {
	boolean startOperator_NULLTEST = (inKey == null);
	if (startOperator_NULLTEST) startOperator_operator = null; else startOperator_operator = (new Integer(inKey.operator));
}
/**
 * This method was generated for supporting the association named LeaseTaskJournal2TaskStart.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddStart2journal(com.hps.july.persistence.LeaseTaskJournal aStart2journal) {
	this.getStart2journalLink().secondaryAddElement(aStart2journal);
}
/**
 * This method was generated for supporting the association named LeaseTaskJournal2TaskStart.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveStart2journal(com.hps.july.persistence.LeaseTaskJournal aStart2journal) {
	this.getStart2journalLink().secondaryRemoveElement(aStart2journal);
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2Economist.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetEconomistWorker(com.hps.july.persistence.Worker anEconomistWorker) throws java.rmi.RemoteException {
	this.getEconomistWorkerLink().secondarySet(anEconomistWorker);
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetLeasedocument(com.hps.july.persistence.LeaseDocument aLeasedocument) throws java.rmi.RemoteException {
	this.getLeasedocumentLink().secondarySet(aLeasedocument);
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2Operator.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetStartOperator(com.hps.july.persistence.Operator aStartOperator) throws java.rmi.RemoteException {
	this.getStartOperatorLink().secondarySet(aStartOperator);
}
/**
 * Setter method for date1
 */
public void setDate1(java.sql.Date newValue) {
	this.date1 = newValue;
}
/**
 * Setter method for date2
 */
public void setDate2(java.sql.Date newValue) {
	this.date2 = newValue;
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2Economist.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setEconomistWorker(com.hps.july.persistence.Worker anEconomistWorker) throws java.rmi.RemoteException {
	this.getEconomistWorkerLink().set(anEconomistWorker);
}
/**
 * Setter method for enddate
 */
public void setEnddate(java.sql.Timestamp newValue) {
	this.enddate = newValue;
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setLeasedocument(com.hps.july.persistence.LeaseDocument aLeasedocument) throws java.rmi.RemoteException {
	this.getLeasedocumentLink().set(aLeasedocument);
}
/**
 * Setter method for startdate
 */
public void setStartdate(java.sql.Timestamp newValue) {
	this.startdate = newValue;
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2Operator.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setStartOperator(com.hps.july.persistence.Operator aStartOperator) throws java.rmi.RemoteException {
	this.getStartOperatorLink().set(aStartOperator);
}
/**
 * Setter method for tasktype
 */
public void setTasktype(java.lang.String newValue) {
	this.tasktype = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
