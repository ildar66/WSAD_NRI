package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Состояние плана-графика
 */
public class ProjectStateBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	public int projectstate;
	private final static long serialVersionUID = 3206093459760846163L;
	public String state;
	public java.lang.Integer man_man;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink manLink = null;
	public java.lang.Integer project_project;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink projectLink = null;
	public java.sql.Timestamp when;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("when", getWhen());
        h.put("projectKey", getProjectKey());
        h.put("state", getState());
        h.put("projectstate", new Integer(getProjectstate()));
        h.put("manKey", getManKey());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.sql.Timestamp localWhen = (java.sql.Timestamp) h.get("when");
        java.lang.String localState = (java.lang.String) h.get("state");

        if ( h.containsKey("when") )
            setWhen((localWhen));
        if ( h.containsKey("state") )
            setState((localState));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getManLink());
	links.addElement(getProjectLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	manLink = null;
	projectLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argProjectstate int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argProjectstate, String argState, int argMan, java.sql.Timestamp argWhen,
			int argProject) 
		throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	projectstate = argProjectstate;
	state = argState;
	when = argWhen;
	project_project = new Integer(argProject);
	man_man = new Integer(argMan);
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argProjectstate int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argProjectstate) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * This method was generated for supporting the association named ProjectState2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.People getMan() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.People)this.getManLink().value();
}
/**
 * This method was generated for supporting the association named ProjectState2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.PeopleKey getManKey() {
	com.hps.july.persistence.PeopleKey temp = null;
	temp = new com.hps.july.persistence.PeopleKey();
	boolean man_NULLTEST = true;
	man_NULLTEST &= (man_man == null);
	temp.man = ((man_man == null) ? 0 : man_man.intValue());
	if (man_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named ProjectState2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getManLink() {
	if (manLink == null)
		manLink = new ProjectStateToManLink(this);
	return manLink;
}
/**
 * This method was generated for supporting the association named ProjectState2project.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.Project getProject() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.Project)this.getProjectLink().value();
}
/**
 * This method was generated for supporting the association named ProjectState2project.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.ProjectKey getProjectKey() {
	com.hps.july.persistence.ProjectKey temp = null;
	temp = new com.hps.july.persistence.ProjectKey();
	boolean project_NULLTEST = true;
	project_NULLTEST &= (project_project == null);
	temp.project = ((project_project == null) ? 0 : project_project.intValue());
	if (project_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named ProjectState2project.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getProjectLink() {
	if (projectLink == null)
		projectLink = new ProjectStateToProjectLink(this);
	return projectLink;
}
/**
 * Insert the method's description here.
 * Creation date: (11.12.2002 16:27:18)
 * @return int
 */
public int getProjectstate() {
	return projectstate;
}
/**
 * Getter method for state
 * @return java.lang.String
 */
public java.lang.String getState() {
	return state;
}
/**
 * Getter method for when
 */
public java.sql.Timestamp getWhen() {
	return when;
}
/**
 * This method was generated for supporting the association named ProjectState2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetManKey(com.hps.july.persistence.PeopleKey inKey) {
	boolean man_NULLTEST = (inKey == null);
	if (man_NULLTEST) man_man = null; else man_man = (new Integer(inKey.man));
}
/**
 * This method was generated for supporting the association named ProjectState2project.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetProjectKey(com.hps.july.persistence.ProjectKey inKey) {
	boolean project_NULLTEST = (inKey == null);
	if (project_NULLTEST) project_project = null; else project_project = (new Integer(inKey.project));
}
/**
 * This method was generated for supporting the association named ProjectState2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetMan(com.hps.july.persistence.People aMan) throws java.rmi.RemoteException {
	this.getManLink().secondarySet(aMan);
}
/**
 * This method was generated for supporting the association named ProjectState2project.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetProject(com.hps.july.persistence.Project aProject) throws java.rmi.RemoteException {
	this.getProjectLink().secondarySet(aProject);
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * This method was generated for supporting the association named ProjectState2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setMan(com.hps.july.persistence.People aMan) throws java.rmi.RemoteException {
	this.getManLink().set(aMan);
}
/**
 * This method was generated for supporting the association named ProjectState2project.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setProject(com.hps.july.persistence.Project aProject) throws java.rmi.RemoteException {
	this.getProjectLink().set(aProject);
}
/**
 * Setter method for state
 * @param newValue java.lang.String
 */
public void setState(java.lang.String newValue) {
	this.state = newValue;
}
/**
 * Setter method for when
 */
public void setWhen(java.sql.Timestamp newValue) {
	this.when = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
