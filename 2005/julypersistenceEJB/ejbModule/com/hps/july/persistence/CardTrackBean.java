package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * История карточки хранения
 */
public class CardTrackBean implements EntityBean {
	public java.math.BigDecimal deltaprice;
	private javax.ejb.EntityContext entityContext = null;
	private final static long serialVersionUID = 3206093459760846163L;
	public int trackId;
	public java.sql.Timestamp when;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink cardLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink documentLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink fromLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink toLink = null;
	public java.lang.Integer card_storagecard;
	public java.lang.Integer from_storageplace;
	public java.lang.Integer to_storageplace;
	public java.lang.Integer document_document;
	public String configuration;
	public String actiontype;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("documentKey", getDocumentKey());
        h.put("when", getWhen());
        h.put("cardKey", getCardKey());
        h.put("configuration", getConfiguration());
        h.put("trackId", new Integer(getTrackId()));
        h.put("deltaprice", getDeltaprice());
        h.put("actiontype", getActiontype());
        h.put("fromKey", getFromKey());
        h.put("toKey", getToKey());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.sql.Timestamp localWhen = (java.sql.Timestamp) h.get("when");
        java.lang.String localConfiguration = (java.lang.String) h.get("configuration");
        Integer localTrackId = (Integer) h.get("trackId");
        java.math.BigDecimal localDeltaprice = (java.math.BigDecimal) h.get("deltaprice");
        java.lang.String localActiontype = (java.lang.String) h.get("actiontype");

        if ( h.containsKey("when") )
            setWhen((localWhen));
        if ( h.containsKey("configuration") )
            setConfiguration((localConfiguration));
        if ( h.containsKey("trackId") )
            setTrackId((localTrackId).intValue());
        if ( h.containsKey("deltaprice") )
            setDeltaprice((localDeltaprice));
        if ( h.containsKey("actiontype") )
            setActiontype((localActiontype));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getCardLink());
	links.addElement(getFromLink());
	links.addElement(getToLink());
	links.addElement(getDocumentLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	cardLink = null;
	fromLink = null;
	toLink = null;
	documentLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argTrackId int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argTrackId) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	trackId = argTrackId;
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argTrackId int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argTrackId, Integer argCard, Integer argDocument, 
	java.sql.Timestamp argWhen, String argType ) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	deltaprice = null;
	trackId = 0;
	when = null;
	card_storagecard = null;
	from_storageplace = null;
	to_storageplace = null;
	document_document = null;
	configuration = null;
	actiontype = null;
	
	trackId = argTrackId;
	card_storagecard = argCard;
	document_document = argDocument;
	when = argWhen;
	actiontype = argType;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argTrackId int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argTrackId) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * Getter method for actiontype
 */
public java.lang.String getActiontype() {
	return actiontype;
}
/**
 * This method was generated for supporting the association named CardTrack2Card.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.StorageCard getCard() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.StorageCard)this.getCardLink().value();
}
/**
 * This method was generated for supporting the association named CardTrack2Card.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.StorageCardKey getCardKey() {
	com.hps.july.persistence.StorageCardKey temp = null;
	temp = new com.hps.july.persistence.StorageCardKey();
	boolean card_NULLTEST = true;
	card_NULLTEST &= (card_storagecard == null);
	temp.storagecard = ((card_storagecard == null) ? 0 : card_storagecard.intValue());
	if (card_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named CardTrack2Card.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getCardLink() {
	if (cardLink == null)
		cardLink = new CardTrackToCardLink(this);
	return cardLink;
}
/**
 * Getter method for configuration
 */
public java.lang.String getConfiguration() {
	return configuration;
}
/**
 * Getter method for deltaprice
 * @return java.math.BigDecimal
 */
public java.math.BigDecimal getDeltaprice() {
	return deltaprice;
}
/**
 * This method was generated for supporting the association named CardTrack2Document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.Document getDocument() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.Document)this.getDocumentLink().value();
}
/**
 * This method was generated for supporting the association named CardTrack2Document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.DocumentKey getDocumentKey() {
	com.hps.july.persistence.DocumentKey temp = null;
	temp = new com.hps.july.persistence.DocumentKey();
	boolean document_NULLTEST = true;
	document_NULLTEST &= (document_document == null);
	temp.document = ((document_document == null) ? 0 : document_document.intValue());
	if (document_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named CardTrack2Document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getDocumentLink() {
	if (documentLink == null)
		documentLink = new CardTrackToDocumentLink(this);
	return documentLink;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * This method was generated for supporting the association named CardTrack2From.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.StoragePlace getFrom() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.StoragePlace)this.getFromLink().value();
}
/**
 * This method was generated for supporting the association named CardTrack2StrogeFrom.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.StoragePlaceKey getFromKey() {
	com.hps.july.persistence.StoragePlaceKey temp = null;
	temp = new com.hps.july.persistence.StoragePlaceKey();
	boolean from_NULLTEST = true;
	from_NULLTEST &= (from_storageplace == null);
	temp.storageplace = ((from_storageplace == null) ? 0 : from_storageplace.intValue());
	if (from_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named CardTrack2From.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getFromLink() {
	if (fromLink == null)
		fromLink = new CardTrackToFromLink(this);
	return fromLink;
}
/**
 * This method was generated for supporting the association named CardTrack2To.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.StoragePlace getTo() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.StoragePlace)this.getToLink().value();
}
/**
 * This method was generated for supporting the association named CardTrack2ToStorage.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.StoragePlaceKey getToKey() {
	com.hps.july.persistence.StoragePlaceKey temp = null;
	temp = new com.hps.july.persistence.StoragePlaceKey();
	boolean to_NULLTEST = true;
	to_NULLTEST &= (to_storageplace == null);
	temp.storageplace = ((to_storageplace == null) ? 0 : to_storageplace.intValue());
	if (to_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named CardTrack2To.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getToLink() {
	if (toLink == null)
		toLink = new CardTrackToToLink(this);
	return toLink;
}
/**
 * Insert the method's description here.
 * Creation date: (16.05.2002 11:14:55)
 * @return int
 */
public int getTrackId() {
	return trackId;
}
/**
 * Getter method for when
 * @return java.sql.Timestamp
 */
public java.sql.Timestamp getWhen() {
	return when;
}
/**
 * This method was generated for supporting the association named CardTrack2Card.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetCardKey(com.hps.july.persistence.StorageCardKey inKey) {
	boolean card_NULLTEST = (inKey == null);
	if (card_NULLTEST) card_storagecard = null; else card_storagecard = (new Integer(inKey.storagecard));
}
/**
 * This method was generated for supporting the association named CardTrack2Document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetDocumentKey(com.hps.july.persistence.DocumentKey inKey) {
	boolean document_NULLTEST = (inKey == null);
	if (document_NULLTEST) document_document = null; else document_document = (new Integer(inKey.document));
}
/**
 * This method was generated for supporting the association named CardTrack2StrogeFrom.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetFromKey(com.hps.july.persistence.StoragePlaceKey inKey) {
	boolean from_NULLTEST = (inKey == null);
	if (from_NULLTEST) from_storageplace = null; else from_storageplace = (new Integer(inKey.storageplace));
}
/**
 * This method was generated for supporting the association named CardTrack2ToStorage.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetToKey(com.hps.july.persistence.StoragePlaceKey inKey) {
	boolean to_NULLTEST = (inKey == null);
	if (to_NULLTEST) to_storageplace = null; else to_storageplace = (new Integer(inKey.storageplace));
}
/**
 * This method was generated for supporting the association named CardTrack2Card.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetCard(com.hps.july.persistence.StorageCard aCard) throws java.rmi.RemoteException {
	this.getCardLink().secondarySet(aCard);
}
/**
 * This method was generated for supporting the association named CardTrack2Document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetDocument(com.hps.july.persistence.Document aDocument) throws java.rmi.RemoteException {
	this.getDocumentLink().secondarySet(aDocument);
}
/**
 * This method was generated for supporting the association named CardTrack2From.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetFrom(com.hps.july.persistence.StoragePlace aFrom) throws java.rmi.RemoteException {
	this.getFromLink().secondarySet(aFrom);
}
/**
 * This method was generated for supporting the association named CardTrack2To.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetTo(com.hps.july.persistence.StoragePlace aTo) throws java.rmi.RemoteException {
	this.getToLink().secondarySet(aTo);
}
/**
 * Setter method for actiontype
 */
public void setActiontype(java.lang.String newValue) {
	this.actiontype = newValue;
}
/**
 * This method was generated for supporting the association named CardTrack2Card.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setCard(com.hps.july.persistence.StorageCard aCard) throws java.rmi.RemoteException {
	this.getCardLink().set(aCard);
}
/**
 * Setter method for configuration
 */
public void setConfiguration(java.lang.String newValue) {
	this.configuration = newValue;
}
/**
 * Setter method for deltaprice
 * @param newValue java.math.BigDecimal
 */
public void setDeltaprice(java.math.BigDecimal newValue) {
	this.deltaprice = newValue;
}
/**
 * This method was generated for supporting the association named CardTrack2Document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setDocument(com.hps.july.persistence.Document aDocument) throws java.rmi.RemoteException {
	this.getDocumentLink().set(aDocument);
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * This method was generated for supporting the association named CardTrack2From.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setFrom(com.hps.july.persistence.StoragePlace aFrom) throws java.rmi.RemoteException {
	this.getFromLink().set(aFrom);
}
/**
 * This method was generated for supporting the association named CardTrack2To.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setTo(com.hps.july.persistence.StoragePlace aTo) throws java.rmi.RemoteException {
	this.getToLink().set(aTo);
}
/**
 * Insert the method's description here.
 * Creation date: (16.05.2002 11:14:55)
 * @param newTrackId int
 */
public void setTrackId(int newTrackId) {
	trackId = newTrackId;
}
/**
 * Setter method for when
 * @param newValue java.sql.Timestamp
 */
public void setWhen(java.sql.Timestamp newValue) {
	this.when = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
