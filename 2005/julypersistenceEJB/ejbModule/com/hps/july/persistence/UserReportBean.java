package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Пользовательский отчет
 */
public class UserReportBean implements EntityBean {
	public String classname;
	private javax.ejb.EntityContext entityContext = null;
	public String jspclass;
	public String jspname;
	public String repname;
	public String rptname;
	public String rptparams;
	private final static long serialVersionUID = 3206093459760846163L;
	public int userrepid;
	public java.lang.Integer userRepGroup_usrgrpid;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink userRepGroupLink = null;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("rptname", getRptname());
        h.put("classname", getClassname());
        h.put("rptparams", getRptparams());
        h.put("userrepid", new Integer(getUserrepid()));
        h.put("repname", getRepname());
        h.put("userRepGroupKey", getUserRepGroupKey());
        h.put("jspname", getJspname());
        h.put("jspclass", getJspclass());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.lang.String localRptname = (java.lang.String) h.get("rptname");
        java.lang.String localClassname = (java.lang.String) h.get("classname");
        java.lang.String localRptparams = (java.lang.String) h.get("rptparams");
        java.lang.String localRepname = (java.lang.String) h.get("repname");
        java.lang.String localJspname = (java.lang.String) h.get("jspname");
        java.lang.String localJspclass = (java.lang.String) h.get("jspclass");

        if ( h.containsKey("rptname") )
            setRptname((localRptname));
        if ( h.containsKey("classname") )
            setClassname((localClassname));
        if ( h.containsKey("rptparams") )
            setRptparams((localRptparams));
        if ( h.containsKey("repname") )
            setRepname((localRepname));
        if ( h.containsKey("jspname") )
            setJspname((localJspname));
        if ( h.containsKey("jspclass") )
            setJspclass((localJspclass));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getUserRepGroupLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	userRepGroupLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argUserrepid int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argUserrepid, Integer usergrpid, String argRepname, String argClassname, String argRptname) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	userrepid = argUserrepid;
	userRepGroup_usrgrpid = usergrpid;
	repname = argRepname;
	classname = argClassname;
	rptname = argRptname;

	jspclass = null;
	jspname = null;
	rptparams = null;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argUserrepid int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argUserrepid) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * Getter method for classname
 * @return java.lang.String
 */
public java.lang.String getClassname() {
	return classname;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * Getter method for jspclass
 * @return java.lang.String
 */
public java.lang.String getJspclass() {
	return jspclass;
}
/**
 * Getter method for jspname
 * @return java.lang.String
 */
public java.lang.String getJspname() {
	return jspname;
}
/**
 * Getter method for repname
 * @return java.lang.String
 */
public java.lang.String getRepname() {
	return repname;
}
/**
 * Getter method for rptname
 * @return java.lang.String
 */
public java.lang.String getRptname() {
	return rptname;
}
/**
 * Getter method for rptparams
 * @return java.lang.String
 */
public java.lang.String getRptparams() {
	return rptparams;
}
/**
 * This method was generated for supporting the association named UserReport2UserRepGroup.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.UserRepGroup getUserRepGroup() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.UserRepGroup)this.getUserRepGroupLink().value();
}
/**
 * This method was generated for supporting the association named UserReport2UserRepGroup.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.UserRepGroupKey getUserRepGroupKey() {
	com.hps.july.persistence.UserRepGroupKey temp = null;
	temp = new com.hps.july.persistence.UserRepGroupKey();
	boolean userRepGroup_NULLTEST = true;
	userRepGroup_NULLTEST &= (userRepGroup_usrgrpid == null);
	temp.usrgrpid = ((userRepGroup_usrgrpid == null) ? 0 : userRepGroup_usrgrpid.intValue());
	if (userRepGroup_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named UserReport2UserRepGroup.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getUserRepGroupLink() {
	if (userRepGroupLink == null)
		userRepGroupLink = new UserReportToUserRepGroupLink(this);
	return userRepGroupLink;
}
/**
 * Insert the method's description here.
 * Creation date: (24.07.2003 17:09:12)
 * @return int
 */
public int getUserrepid() {
	return userrepid;
}
/**
 * This method was generated for supporting the association named UserReport2UserRepGroup.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetUserRepGroupKey(com.hps.july.persistence.UserRepGroupKey inKey) {
	boolean userRepGroup_NULLTEST = (inKey == null);
	if (userRepGroup_NULLTEST) userRepGroup_usrgrpid = null; else userRepGroup_usrgrpid = (new Integer(inKey.usrgrpid));
}
/**
 * This method was generated for supporting the association named UserReport2UserRepGroup.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetUserRepGroup(com.hps.july.persistence.UserRepGroup anUserRepGroup) throws java.rmi.RemoteException {
	this.getUserRepGroupLink().secondarySet(anUserRepGroup);
}
/**
 * Setter method for classname
 * @param newValue java.lang.String
 */
public void setClassname(java.lang.String newValue) {
	this.classname = newValue;
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Setter method for jspclass
 * @param newValue java.lang.String
 */
public void setJspclass(java.lang.String newValue) {
	this.jspclass = newValue;
}
/**
 * Setter method for jspname
 * @param newValue java.lang.String
 */
public void setJspname(java.lang.String newValue) {
	this.jspname = newValue;
}
/**
 * Setter method for repname
 * @param newValue java.lang.String
 */
public void setRepname(java.lang.String newValue) {
	this.repname = newValue;
}
/**
 * Setter method for rptname
 * @param newValue java.lang.String
 */
public void setRptname(java.lang.String newValue) {
	this.rptname = newValue;
}
/**
 * Setter method for rptparams
 * @param newValue java.lang.String
 */
public void setRptparams(java.lang.String newValue) {
	this.rptparams = newValue;
}
/**
 * This method was generated for supporting the association named UserReport2UserRepGroup.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setUserRepGroup(com.hps.july.persistence.UserRepGroup anUserRepGroup) throws java.rmi.RemoteException {
	this.getUserRepGroupLink().set(anUserRepGroup);
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
