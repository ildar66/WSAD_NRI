package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Обобщенный документ аренды
 */
public class LeaseDocumentBean implements EntityBean {
	public java.sql.Date documentDate;
	public String documentNumber;
	private javax.ejb.EntityContext entityContext = null;
	public int leaseDocument;
	private final static long serialVersionUID = 3206093459760846163L;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink leaseRulesLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink leaseTaskStartsLink = null;
	public Integer operator;
	private int tempOperator;
	public java.sql.Timestamp modified;
	public java.sql.Timestamp created;
	public Integer modifiedby;
	public Integer createdby;
	public int regionid;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("createdby", getCreatedby());
        h.put("documentDate", getDocumentDate());
        h.put("documentNumber", getDocumentNumber());
        h.put("leaseDocument", new Integer(getLeaseDocument()));
        h.put("created", getCreated());
        h.put("modifiedby", getModifiedby());
        h.put("operator", getOperator());
        h.put("regionid", new Integer(getRegionid()));
        h.put("modified", getModified());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.lang.Integer localCreatedby = (java.lang.Integer) h.get("createdby");
        java.sql.Date localDocumentDate = (java.sql.Date) h.get("documentDate");
        java.lang.String localDocumentNumber = (java.lang.String) h.get("documentNumber");
        Integer localLeaseDocument = (Integer) h.get("leaseDocument");
        java.sql.Timestamp localCreated = (java.sql.Timestamp) h.get("created");
        java.lang.Integer localModifiedby = (java.lang.Integer) h.get("modifiedby");
        java.lang.Integer localOperator = (java.lang.Integer) h.get("operator");
        Integer localRegionid = (Integer) h.get("regionid");
        java.sql.Timestamp localModified = (java.sql.Timestamp) h.get("modified");

        if ( h.containsKey("createdby") )
            setCreatedby((localCreatedby));
        if ( h.containsKey("documentDate") )
            setDocumentDate((localDocumentDate));
        if ( h.containsKey("documentNumber") )
            setDocumentNumber((localDocumentNumber));
        if ( h.containsKey("leaseDocument") )
            setLeaseDocument((localLeaseDocument).intValue());
        if ( h.containsKey("created") )
            setCreated((localCreated));
        if ( h.containsKey("modifiedby") )
            setModifiedby((localModifiedby));
        if ( h.containsKey("operator") )
            setOperator((localOperator));
        if ( h.containsKey("regionid") )
            setRegionid((localRegionid).intValue());
        if ( h.containsKey("modified") )
            setModified((localModified));

}
	/**
	 * This method was generated for supporting the associations.
	 */
	protected java.util.Vector _getLinks() {
		java.util.Vector links = new java.util.Vector();
		links.add(getLeaseTaskStartsLink());
		links.add(getLeaseRulesLink());
		return links;
	}
	/**
	 * This method was generated for supporting the associations.
	 */
	protected void _initLinks() {
		leaseTaskStartsLink = null;
		leaseRulesLink = null;
	}
	/**
	 * This method was generated for supporting the associations.
	 */
	protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
		java.util.List links = _getLinks();
		for (int i = 0; i < links.size(); i++) {
			try {
				((com.ibm.ivj.ejb.associations.interfaces.Link) links.get(i)).remove();
			} catch (javax.ejb.FinderException e) {
			} //Consume Finder error since I am going away
		}
	}
/**
 * This method was generated for supporting the association named LeaseRule2leasedoc.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addLeaseRules(com.hps.july.persistence.LeaseRule aLeaseRules) throws java.rmi.RemoteException {
	this.getLeaseRulesLink().addElement(aLeaseRules);
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addLeaseTaskStarts(com.hps.july.persistence.LeaseTaskStart aLeaseTaskStarts) throws java.rmi.RemoteException {
	this.getLeaseTaskStartsLink().addElement(aLeaseTaskStarts);
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
	/**
	 * ejbCreate method for a CMP entity bean.
	 */
	public com.hps.july.persistence.LeaseDocumentKey ejbCreate(int leaseDocument) throws javax.ejb.CreateException, java.rmi.RemoteException {
		_initLinks();
		this.leaseDocument = leaseDocument;
		return null;
	}
/**
 * ejbCreate method for a CMP entity bean
 * @param argLeaseDocument int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argLeaseDocument, java.sql.Date argDocDate, String argDocNumber ) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	leaseDocument = argLeaseDocument;
	documentDate = argDocDate;
	documentNumber = argDocNumber;
	operator = null;
	modified = null;
	modifiedby = null;
	created = null;
	createdby = null;
	regionid = 1;
	setOperator();
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
	setOperator();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
	/**
	 * ejbPostCreate
	 */
	public void ejbPostCreate(int leaseDocument) throws javax.ejb.CreateException, java.rmi.RemoteException {
	}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
public void ejbStore() throws java.rmi.RemoteException {
	//System.out.println("LeaseDocument_ejbStore operator="+operator);
	if(tempOperator == 0) {
		System.out.println("LeaseDocument_ejbStore Не определен оператор !!!");
		setOperator(null);
	}
	else
		setOperator(new Integer(tempOperator));
}
/**
 * Getter method for created
 */
public java.sql.Timestamp getCreated() {
	return created;
}
/**
 * Getter method for createdby
 */
public java.lang.Integer getCreatedby() {
	return createdby;
}
/**
 * Getter method for documentDate
 * @return java.sql.Date
 */
public java.sql.Date getDocumentDate() {
	return documentDate;
}
/**
 * Getter method for documentNumber
 * @return java.lang.String
 */
public java.lang.String getDocumentNumber() {
	return documentNumber;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * Insert the method's description here.
 * Creation date: (27.06.2002 12:42:18)
 * @return int
 */
public int getLeaseDocument() {
	return leaseDocument;
}
/**
 * This method was generated for supporting the association named LeaseRule2leasedoc.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getLeaseRules() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getLeaseRulesLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named LeaseRule2leasedoc.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getLeaseRulesLink() {
	if (leaseRulesLink == null)
		leaseRulesLink = new LeaseDocumentToLeaseRulesLink(this);
	return leaseRulesLink;
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getLeaseTaskStarts() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getLeaseTaskStartsLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getLeaseTaskStartsLink() {
	if (leaseTaskStartsLink == null)
		leaseTaskStartsLink = new LeaseDocumentToLeaseTaskStartsLink(this);
	return leaseTaskStartsLink;
}
/**
 * Getter method for modified
 */
public java.sql.Timestamp getModified() {
	return modified;
}
/**
 * Getter method for modifiedby
 */
public java.lang.Integer getModifiedby() {
	return modifiedby;
}
/**
 * Getter method for operator
 */
public java.lang.Integer getOperator() {
	return operator;
}
/**
 * Getter method for regionid
 */
public int getRegionid() {
	return regionid;
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void removeLeaseTaskStarts(com.hps.july.persistence.LeaseTaskStart aLeaseTaskStarts) throws java.rmi.RemoteException {
	this.getLeaseTaskStartsLink().removeElement(aLeaseTaskStarts);
}
/**
 * This method was generated for supporting the association named LeaseRule2leasedoc.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddLeaseRules(com.hps.july.persistence.LeaseRule aLeaseRules) {
	this.getLeaseRulesLink().secondaryAddElement(aLeaseRules);
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddLeaseTaskStarts(com.hps.july.persistence.LeaseTaskStart aLeaseTaskStarts) {
	this.getLeaseTaskStartsLink().secondaryAddElement(aLeaseTaskStarts);
}
/**
 * This method was generated for supporting the association named LeaseRule2leasedoc.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveLeaseRules(com.hps.july.persistence.LeaseRule aLeaseRules) {
	this.getLeaseRulesLink().secondaryRemoveElement(aLeaseRules);
}
/**
 * This method was generated for supporting the association named LeaseTaskStart2document.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveLeaseTaskStarts(com.hps.july.persistence.LeaseTaskStart aLeaseTaskStarts) {
	this.getLeaseTaskStartsLink().secondaryRemoveElement(aLeaseTaskStarts);
}
/**
 * Setter method for created
 */
public void setCreated(java.sql.Timestamp newValue) {
	this.created = newValue;
}
/**
 * Setter method for createdby
 */
public void setCreatedby(java.lang.Integer newValue) {
	this.createdby = newValue;
}
/**
 * Setter method for documentDate
 * @param newValue java.sql.Date
 */
public void setDocumentDate(java.sql.Date newValue) {
	this.documentDate = newValue;
}
/**
 * Setter method for documentNumber
 * @param newValue java.lang.String
 */
public void setDocumentNumber(java.lang.String newValue) {
	this.documentNumber = newValue;
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Insert the method's description here.
 * Creation date: (27.06.2002 12:42:18)
 * @param newLeaseDocument int
 */
public void setLeaseDocument(int newLeaseDocument) {
	leaseDocument = newLeaseDocument;
}
/**
 * Setter method for modified
 */
public void setModified(java.sql.Timestamp newValue) {
	this.modified = newValue;
}
/**
 * Setter method for modifiedby
 */
public void setModifiedby(java.lang.Integer newValue) {
	this.modifiedby = newValue;
}
private void setOperator() throws java.rmi.RemoteException{
	try{
		String operatorName = entityContext.getCallerIdentity().getName();
		int index = operatorName.indexOf("/");
		if(index != -1)
			operatorName = operatorName.substring(index+1);
//System.out.println("LeaseDocument operatorName="+operatorName+"=");	
			tempOperator = new OperatorAccessBean().findByLogin(operatorName).getOperator();

			setOperator(new Integer(tempOperator));
//System.out.println("LeaseDocument operatorValue="+operator);
	}catch(Exception e){
		setOperator(null);
		System.out.println("LeaseDocument_SetOperator Не могу присвоить значение полю operator");
		//e.printStackTrace();
	}
}
/**
 * Setter method for operator
 */
public void setOperator(java.lang.Integer newValue) {
	this.operator = newValue;
}
/**
 * Setter method for regionid
 */
public void setRegionid(int newValue) {
	this.regionid = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
