package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Место хранения оборудования
 */
public class StoragePlaceBean implements EntityBean {
	public String address;
	public java.sql.Date closedate;
	private javax.ejb.EntityContext entityContext = null;
	public String name;
	private final static long serialVersionUID = 3206093459760846163L;
	public int storageplace;
	public java.lang.Integer division_division;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink divisionLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink storageCardLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink outDocumentLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink inDocumentLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink cardTrackFromLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink cardTrackToLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink sitedoc2SplacesLink = null;
	public Integer operator;
	private Integer tempOperator;
	public java.sql.Timestamp modified;
	public java.sql.Timestamp created;
	public Integer modifiedby;
	public Integer createdby;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("createdby", getCreatedby());
        h.put("storageplace", new Integer(getStorageplace()));
        h.put("address", getAddress());
        h.put("closedate", getClosedate());
        h.put("created", getCreated());
        h.put("modifiedby", getModifiedby());
        h.put("operator", getOperator());
        h.put("divisionKey", getDivisionKey());
        h.put("modified", getModified());
        h.put("name", getName());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.lang.Integer localCreatedby = (java.lang.Integer) h.get("createdby");
        Integer localStorageplace = (Integer) h.get("storageplace");
        java.lang.String localAddress = (java.lang.String) h.get("address");
        java.sql.Date localClosedate = (java.sql.Date) h.get("closedate");
        java.sql.Timestamp localCreated = (java.sql.Timestamp) h.get("created");
        java.lang.Integer localModifiedby = (java.lang.Integer) h.get("modifiedby");
        java.lang.Integer localOperator = (java.lang.Integer) h.get("operator");
        java.sql.Timestamp localModified = (java.sql.Timestamp) h.get("modified");
        java.lang.String localName = (java.lang.String) h.get("name");

        if ( h.containsKey("createdby") )
            setCreatedby((localCreatedby));
        if ( h.containsKey("storageplace") )
            setStorageplace((localStorageplace).intValue());
        if ( h.containsKey("address") )
            setAddress((localAddress));
        if ( h.containsKey("closedate") )
            setClosedate((localClosedate));
        if ( h.containsKey("created") )
            setCreated((localCreated));
        if ( h.containsKey("modifiedby") )
            setModifiedby((localModifiedby));
        if ( h.containsKey("operator") )
            setOperator((localOperator));
        if ( h.containsKey("modified") )
            setModified((localModified));
        if ( h.containsKey("name") )
            setName((localName));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getInDocumentLink());
	links.addElement(getCardTrackToLink());
	links.addElement(getCardTrackFromLink());
	links.addElement(getDivisionLink());
	links.addElement(getOutDocumentLink());
	links.addElement(getStorageCardLink());
	links.addElement(getSitedoc2SplacesLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	inDocumentLink = null;
	cardTrackToLink = null;
	cardTrackFromLink = null;
	divisionLink = null;
	outDocumentLink = null;
	storageCardLink = null;
	sitedoc2SplacesLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * This method was generated for supporting the association named CardTrack2From.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addCardTrackFrom(com.hps.july.persistence.CardTrack aCardTrackFrom) throws java.rmi.RemoteException {
	this.getCardTrackFromLink().addElement(aCardTrackFrom);
}
/**
 * This method was generated for supporting the association named CardTrack2To.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addCardTrackTo(com.hps.july.persistence.CardTrack aCardTrackTo) throws java.rmi.RemoteException {
	this.getCardTrackToLink().addElement(aCardTrackTo);
}
/**
 * This method was generated for supporting the association named Document2To.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addInDocument(com.hps.july.persistence.Document anInDocument) throws java.rmi.RemoteException {
	this.getInDocumentLink().addElement(anInDocument);
}
/**
 * This method was generated for supporting the association named Document2From.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addOutDocument(com.hps.july.persistence.Document anOutDocument) throws java.rmi.RemoteException {
	this.getOutDocumentLink().addElement(anOutDocument);
}
/**
 * This method was generated for supporting the association named StorageCard2StoragePlace.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addStorageCard(com.hps.july.persistence.StorageCard aStorageCard) throws java.rmi.RemoteException {
	this.getStorageCardLink().addElement(aStorageCard);
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argStorageplace int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argStorageplace) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	storageplace = argStorageplace;
	operator = null;
	created = null;
	createdby = null;
	modified = null;
	modifiedby = null;
	setOperator();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argStorageplace int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argStorageplace, Integer argDivision, String argName, String argAddress ) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	address = null;
	closedate = null;
	name = null;
	storageplace = 0;
	division_division = null;

	storageplace = argStorageplace;
	division_division = argDivision;
	name = argName;
	address = argAddress;
	operator = null;
	created = null;
	createdby = null;
	modified = null;
	modifiedby = null;
	setOperator();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argStorageplace int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argStorageplace, String argName, String argAddress ) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	storageplace = argStorageplace;
	name = argName;
	address = argAddress;
	operator = null;
	created = null;
	createdby = null;
	modified = null;
	modifiedby = null;
	setOperator();
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
	setOperator();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argStorageplace int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argStorageplace) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	//_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {
	//System.out.println("Storageplace_ejbStore operator="+operator);
	if(tempOperator == null){
		System.out.println("Storageplace_ejbStore Не определен оператор !!!");
		setOperator(null);
	}
	else
		setOperator(tempOperator);
}
/**
 * Getter method for address
 * @return java.lang.String
 */
public java.lang.String getAddress() {
	return address;
}
/**
 * This method was generated for supporting the association named CardTrack2From.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getCardTrackFrom() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getCardTrackFromLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named CardTrack2From.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getCardTrackFromLink() {
	if (cardTrackFromLink == null)
		cardTrackFromLink = new StoragePlaceToCardTrackFromLink(this);
	return cardTrackFromLink;
}
/**
 * This method was generated for supporting the association named CardTrack2To.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getCardTrackTo() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getCardTrackToLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named CardTrack2To.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getCardTrackToLink() {
	if (cardTrackToLink == null)
		cardTrackToLink = new StoragePlaceToCardTrackToLink(this);
	return cardTrackToLink;
}
/**
 * Getter method for closedate
 * @return java.sql.Date
 */
public java.sql.Date getClosedate() {
	return closedate;
}
/**
 * Getter method for created
 */
public java.sql.Timestamp getCreated() {
	return created;
}
/**
 * Getter method for createdby
 */
public java.lang.Integer getCreatedby() {
	return createdby;
}
/**
 * This method was generated for supporting the association named StoragePlace2division.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.Division getDivision() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.Division)this.getDivisionLink().value();
}
/**
 * This method was generated for supporting the association named StoragePlace2division.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.DivisionKey getDivisionKey() {
	com.hps.july.persistence.DivisionKey temp = null;
	temp = new com.hps.july.persistence.DivisionKey();
	boolean division_NULLTEST = true;
	division_NULLTEST &= (division_division == null);
	temp.division = ((division_division == null) ? 0 : division_division.intValue());
	if (division_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named StoragePlace2division.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getDivisionLink() {
	if (divisionLink == null)
		divisionLink = new StoragePlaceToDivisionLink(this);
	return divisionLink;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * This method was generated for supporting the association named Document2To.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getInDocument() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getInDocumentLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named Document2To.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getInDocumentLink() {
	if (inDocumentLink == null)
		inDocumentLink = new StoragePlaceToInDocumentLink(this);
	return inDocumentLink;
}
/**
 * Getter method for modified
 */
public java.sql.Timestamp getModified() {
	return modified;
}
/**
 * Getter method for modifiedby
 */
public java.lang.Integer getModifiedby() {
	return modifiedby;
}
/**
 * Getter method for name
 * @return java.lang.String
 */
public java.lang.String getName() {
	return name;
}
/**
 * Insert the method's description here.
 * Creation date: (17.06.2003 20:47:42)
 * @return java.lang.Integer
 */
public java.lang.Integer getOperator() {
	return operator;
}
/**
 * This method was generated for supporting the association named Document2From.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getOutDocument() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getOutDocumentLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named Document2From.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getOutDocumentLink() {
	if (outDocumentLink == null)
		outDocumentLink = new StoragePlaceToOutDocumentLink(this);
	return outDocumentLink;
}
/**
 * This method was generated for supporting the association named Sitedoc2Splace2StoragePlace.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getSitedoc2Splaces() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getSitedoc2SplacesLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named Sitedoc2Splace2StoragePlace.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getSitedoc2SplacesLink() {
	if (sitedoc2SplacesLink == null)
		sitedoc2SplacesLink = new StoragePlaceToSitedoc2SplacesLink(this);
	return sitedoc2SplacesLink;
}
/**
 * This method was generated for supporting the association named StorageCard2StoragePlace.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getStorageCard() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getStorageCardLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named StorageCard2StoragePlace.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getStorageCardLink() {
	if (storageCardLink == null)
		storageCardLink = new StoragePlaceToStorageCardLink(this);
	return storageCardLink;
}
/**
 * Insert the method's description here.
 * Creation date: (19.04.2002 14:24:13)
 * @return int
 */
public int getStorageplace() {
	return storageplace;
}
/**
 * This method was generated for supporting the association named StoragePlace2division.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetDivisionKey(com.hps.july.persistence.DivisionKey inKey) {
	boolean division_NULLTEST = (inKey == null);
	if (division_NULLTEST) division_division = null; else division_division = (new Integer(inKey.division));
}
/**
 * This method was generated for supporting the association named CardTrack2From.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddCardTrackFrom(com.hps.july.persistence.CardTrack aCardTrackFrom) {
	this.getCardTrackFromLink().secondaryAddElement(aCardTrackFrom);
}
/**
 * This method was generated for supporting the association named CardTrack2To.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddCardTrackTo(com.hps.july.persistence.CardTrack aCardTrackTo) {
	this.getCardTrackToLink().secondaryAddElement(aCardTrackTo);
}
/**
 * This method was generated for supporting the association named Document2To.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddInDocument(com.hps.july.persistence.Document anInDocument) {
	this.getInDocumentLink().secondaryAddElement(anInDocument);
}
/**
 * This method was generated for supporting the association named Document2From.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddOutDocument(com.hps.july.persistence.Document anOutDocument) {
	this.getOutDocumentLink().secondaryAddElement(anOutDocument);
}
/**
 * This method was generated for supporting the association named Sitedoc2Splace2StoragePlace.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddSitedoc2Splaces(com.hps.july.persistence.Sitedoc2Splace aSitedoc2Splaces) {
	this.getSitedoc2SplacesLink().secondaryAddElement(aSitedoc2Splaces);
}
/**
 * This method was generated for supporting the association named StorageCard2StoragePlace.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddStorageCard(com.hps.july.persistence.StorageCard aStorageCard) {
	this.getStorageCardLink().secondaryAddElement(aStorageCard);
}
/**
 * This method was generated for supporting the association named CardTrack2From.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveCardTrackFrom(com.hps.july.persistence.CardTrack aCardTrackFrom) {
	this.getCardTrackFromLink().secondaryRemoveElement(aCardTrackFrom);
}
/**
 * This method was generated for supporting the association named CardTrack2To.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveCardTrackTo(com.hps.july.persistence.CardTrack aCardTrackTo) {
	this.getCardTrackToLink().secondaryRemoveElement(aCardTrackTo);
}
/**
 * This method was generated for supporting the association named Document2To.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveInDocument(com.hps.july.persistence.Document anInDocument) {
	this.getInDocumentLink().secondaryRemoveElement(anInDocument);
}
/**
 * This method was generated for supporting the association named Document2From.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveOutDocument(com.hps.july.persistence.Document anOutDocument) {
	this.getOutDocumentLink().secondaryRemoveElement(anOutDocument);
}
/**
 * This method was generated for supporting the association named Sitedoc2Splace2StoragePlace.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveSitedoc2Splaces(com.hps.july.persistence.Sitedoc2Splace aSitedoc2Splaces) {
	this.getSitedoc2SplacesLink().secondaryRemoveElement(aSitedoc2Splaces);
}
/**
 * This method was generated for supporting the association named StorageCard2StoragePlace.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveStorageCard(com.hps.july.persistence.StorageCard aStorageCard) {
	this.getStorageCardLink().secondaryRemoveElement(aStorageCard);
}
/**
 * This method was generated for supporting the association named StoragePlace2division.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetDivision(com.hps.july.persistence.Division aDivision) throws java.rmi.RemoteException {
	this.getDivisionLink().secondarySet(aDivision);
}
/**
 * Setter method for address
 * @param newValue java.lang.String
 */
public void setAddress(java.lang.String newValue) {
	this.address = newValue;
}
/**
 * Setter method for closedate
 * @param newValue java.sql.Date
 */
public void setClosedate(java.sql.Date newValue) {
	this.closedate = newValue;
}
/**
 * Setter method for created
 */
public void setCreated(java.sql.Timestamp newValue) {
	this.created = newValue;
}
/**
 * Setter method for createdby
 */
public void setCreatedby(java.lang.Integer newValue) {
	this.createdby = newValue;
}
/**
 * This method was generated for supporting the association named StoragePlace2division.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setDivision(com.hps.july.persistence.Division aDivision) throws java.rmi.RemoteException {
	this.getDivisionLink().set(aDivision);
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Setter method for modified
 */
public void setModified(java.sql.Timestamp newValue) {
	this.modified = newValue;
}
/**
 * Setter method for modifiedby
 */
public void setModifiedby(java.lang.Integer newValue) {
	this.modifiedby = newValue;
}
/**
 * Setter method for name
 * @param newValue java.lang.String
 */
public void setName(java.lang.String newValue) {
	this.name = newValue;
}
public void setOperator() throws java.rmi.RemoteException{
		String operatorName = entityContext.getCallerIdentity().getName();
		tempOperator = OperatorObject.getOperatorCode(operatorName);
		setOperator(tempOperator);
}
/**
 * Insert the method's description here.
 * Creation date: (17.06.2003 20:47:42)
 * @param newOperator java.lang.Integer
 */
public void setOperator(java.lang.Integer newOperator) {
	operator = newOperator;
}
/**
 * Insert the method's description here.
 * Creation date: (19.04.2002 14:24:13)
 * @param newStorageplace int
 */
public void setStorageplace(int newStorageplace) {
	storageplace = newStorageplace;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
