package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Физическое лицо
 */
public class PeopleBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	public String firstname;
	public String lastname;
	public int man;
	public String middlename;
	public String passportser;
	private final static long serialVersionUID = 3206093459760846163L;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink workersLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink operatorsLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink projectStatesLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink changeLogsLink = null;
	public java.sql.Date passportDate;
	public String passportWhom;
	public Boolean isActive;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink siteDocsLink = null;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("man", new Integer(getMan()));
        h.put("passportDate", getPassportDate());
        h.put("passportser", getPassportser());
        h.put("lastname", getLastname());
        h.put("firstname", getFirstname());
        h.put("passportWhom", getPassportWhom());
        h.put("fullName", getFullName());
        h.put("isActive", getIsActive());
        h.put("middlename", getMiddlename());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        Integer localMan = (Integer) h.get("man");
        java.sql.Date localPassportDate = (java.sql.Date) h.get("passportDate");
        java.lang.String localPassportser = (java.lang.String) h.get("passportser");
        java.lang.String localLastname = (java.lang.String) h.get("lastname");
        java.lang.String localFirstname = (java.lang.String) h.get("firstname");
        java.lang.String localPassportWhom = (java.lang.String) h.get("passportWhom");
        java.lang.Boolean localIsActive = (java.lang.Boolean) h.get("isActive");
        java.lang.String localMiddlename = (java.lang.String) h.get("middlename");

        if ( h.containsKey("man") )
            setMan((localMan).intValue());
        if ( h.containsKey("passportDate") )
            setPassportDate((localPassportDate));
        if ( h.containsKey("passportser") )
            setPassportser((localPassportser));
        if ( h.containsKey("lastname") )
            setLastname((localLastname));
        if ( h.containsKey("firstname") )
            setFirstname((localFirstname));
        if ( h.containsKey("passportWhom") )
            setPassportWhom((localPassportWhom));
        if ( h.containsKey("isActive") )
            setIsActive((localIsActive));
        if ( h.containsKey("middlename") )
            setMiddlename((localMiddlename));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getProjectStatesLink());
	links.addElement(getChangeLogsLink());
	links.addElement(getOperatorsLink());
	links.addElement(getWorkersLink());
	links.addElement(getSiteDocsLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	projectStatesLink = null;
	changeLogsLink = null;
	operatorsLink = null;
	workersLink = null;
	siteDocsLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * This method was generated for supporting the association named ChangeLog2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addChangeLogs(com.hps.july.persistence.ChangeLog aChangeLogs) throws java.rmi.RemoteException {
	this.getChangeLogsLink().addElement(aChangeLogs);
}
/**
 * This method was generated for supporting the association named operators2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addOperators(com.hps.july.persistence.Operator anOperators) throws java.rmi.RemoteException {
	this.getOperatorsLink().addElement(anOperators);
}
/**
 * This method was generated for supporting the association named ProjectState2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addProjectStates(com.hps.july.persistence.ProjectState aProjectStates) throws java.rmi.RemoteException {
	this.getProjectStatesLink().addElement(aProjectStates);
}
/**
 * This method was generated for supporting the association named SiteDoc2People.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addSiteDocs(com.hps.july.persistence.SiteDoc aSiteDocs) throws java.rmi.RemoteException {
	this.getSiteDocsLink().addElement(aSiteDocs);
}
/**
 * This method was generated for supporting the association named workers2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addWorkers(com.hps.july.persistence.Worker aWorkers) throws java.rmi.RemoteException {
	this.getWorkersLink().addElement(aWorkers);
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argMan int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argMan) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	man = argMan;
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argMan int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argMan, String argFirstName, String argMiddleName, String argLastName, String argPassportSer ) throws javax.ejb.CreateException, java.rmi.RemoteException {

	ejbCreate(argMan, argFirstName, argMiddleName, argLastName, argPassportSer, Boolean.TRUE);
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argMan int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argMan, String argFirstName, String argMiddleName, 
	String argLastName, String argPassportSer, Boolean argIsActive ) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	firstname = null;
	lastname = null;
	man = 0;
	middlename = null;
	passportser = null;

	man = argMan;
	firstname = argFirstName;
	middlename = argMiddleName;
	lastname = argLastName;
	passportser = argPassportSer;
	passportDate = null;
	passportWhom = null;
	isActive = argIsActive;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argMan int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argMan) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	//_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * This method was generated for supporting the association named ChangeLog2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getChangeLogs() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getChangeLogsLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named ChangeLog2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getChangeLogsLink() {
	if (changeLogsLink == null)
		changeLogsLink = new PeopleToChangeLogsLink(this);
	return changeLogsLink;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * Getter method for firstname
 * @return java.lang.String
 */
public java.lang.String getFirstname() {
	return firstname;
}
/**
 * Insert the method's description here.
 * Creation date: (22.02.2002 15:29:29)
 * @return java.lang.String
 */
public String getFullName() {
	return getLastname()+' '+getFirstname()+' '+getMiddlename();
}
/**
 * Getter method for isActive
 */
public java.lang.Boolean getIsActive() {
	return isActive;
}
/**
 * Getter method for lastname
 * @return java.lang.String
 */
public java.lang.String getLastname() {
	return lastname;
}
/**
 * Insert the method's description here.
 * Creation date: (11.04.2002 18:10:08)
 * @return int
 */
public int getMan() {
	return man;
}
/**
 * Getter method for middlename
 * @return java.lang.String
 */
public java.lang.String getMiddlename() {
	return middlename;
}
/**
 * This method was generated for supporting the association named operators2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getOperators() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getOperatorsLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named operators2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getOperatorsLink() {
	if (operatorsLink == null)
		operatorsLink = new PeopleToOperatorsLink(this);
	return operatorsLink;
}
/**
 * Getter method for passportDate
 */
public java.sql.Date getPassportDate() {
	return passportDate;
}
/**
 * Getter method for passportser
 * @return java.lang.String
 */
public java.lang.String getPassportser() {
	return passportser;
}
/**
 * Getter method for passportWhom
 */
public java.lang.String getPassportWhom() {
	return passportWhom;
}
/**
 * This method was generated for supporting the association named ProjectState2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getProjectStates() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getProjectStatesLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named ProjectState2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getProjectStatesLink() {
	if (projectStatesLink == null)
		projectStatesLink = new PeopleToProjectStatesLink(this);
	return projectStatesLink;
}
/**
 * This method was generated for supporting the association named SiteDoc2People.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getSiteDocs() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getSiteDocsLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named SiteDoc2People.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getSiteDocsLink() {
	if (siteDocsLink == null)
		siteDocsLink = new PeopleToSiteDocsLink(this);
	return siteDocsLink;
}
/**
 * This method was generated for supporting the association named workers2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getWorkers() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getWorkersLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named workers2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getWorkersLink() {
	if (workersLink == null)
		workersLink = new PeopleToWorkersLink(this);
	return workersLink;
}
/**
 * This method was generated for supporting the association named ChangeLog2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddChangeLogs(com.hps.july.persistence.ChangeLog aChangeLogs) {
	this.getChangeLogsLink().secondaryAddElement(aChangeLogs);
}
/**
 * This method was generated for supporting the association named operators2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddOperators(com.hps.july.persistence.Operator anOperators) {
	this.getOperatorsLink().secondaryAddElement(anOperators);
}
/**
 * This method was generated for supporting the association named ProjectState2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddProjectStates(com.hps.july.persistence.ProjectState aProjectStates) {
	this.getProjectStatesLink().secondaryAddElement(aProjectStates);
}
/**
 * This method was generated for supporting the association named SiteDoc2People.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddSiteDocs(com.hps.july.persistence.SiteDoc aSiteDocs) {
	this.getSiteDocsLink().secondaryAddElement(aSiteDocs);
}
/**
 * This method was generated for supporting the association named workers2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddWorkers(com.hps.july.persistence.Worker aWorkers) {
	this.getWorkersLink().secondaryAddElement(aWorkers);
}
/**
 * This method was generated for supporting the association named ChangeLog2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveChangeLogs(com.hps.july.persistence.ChangeLog aChangeLogs) {
	this.getChangeLogsLink().secondaryRemoveElement(aChangeLogs);
}
/**
 * This method was generated for supporting the association named operators2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveOperators(com.hps.july.persistence.Operator anOperators) {
	this.getOperatorsLink().secondaryRemoveElement(anOperators);
}
/**
 * This method was generated for supporting the association named ProjectState2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveProjectStates(com.hps.july.persistence.ProjectState aProjectStates) {
	this.getProjectStatesLink().secondaryRemoveElement(aProjectStates);
}
/**
 * This method was generated for supporting the association named SiteDoc2People.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveSiteDocs(com.hps.july.persistence.SiteDoc aSiteDocs) {
	this.getSiteDocsLink().secondaryRemoveElement(aSiteDocs);
}
/**
 * This method was generated for supporting the association named workers2people.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveWorkers(com.hps.july.persistence.Worker aWorkers) {
	this.getWorkersLink().secondaryRemoveElement(aWorkers);
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Setter method for firstname
 * @param newValue java.lang.String
 */
public void setFirstname(java.lang.String newValue) {
	this.firstname = newValue;
}
/**
 * Setter method for isActive
 */
public void setIsActive(java.lang.Boolean newValue) {
	this.isActive = newValue;
}
/**
 * Setter method for lastname
 * @param newValue java.lang.String
 */
public void setLastname(java.lang.String newValue) {
	this.lastname = newValue;
}
/**
 * Insert the method's description here.
 * Creation date: (11.04.2002 18:10:08)
 * @param newMan int
 */
public void setMan(int newMan) {
	man = newMan;
}
/**
 * Setter method for middlename
 * @param newValue java.lang.String
 */
public void setMiddlename(java.lang.String newValue) {
	this.middlename = newValue;
}
/**
 * Setter method for passportDate
 */
public void setPassportDate(java.sql.Date newValue) {
	this.passportDate = newValue;
}
/**
 * Setter method for passportser
 * @param newValue java.lang.String
 */
public void setPassportser(java.lang.String newValue) {
	this.passportser = newValue;
}
/**
 * Setter method for passportWhom
 */
public void setPassportWhom(java.lang.String newValue) {
	this.passportWhom = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
