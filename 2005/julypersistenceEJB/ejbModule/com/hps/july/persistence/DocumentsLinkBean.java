package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Связь между документами
 */
public class DocumentsLinkBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	private final static long serialVersionUID = 3206093459760846163L;
	public String type;
	public java.lang.Integer documentfrom_document;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink documentfromLink = null;
	public java.lang.Integer documentTo_document;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink documentToLink = null;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("documentToKey", getDocumentToKey());
        h.put("documentfrom_document", getDocumentfrom_document());
        h.put("documentfromKey", getDocumentfromKey());
        h.put("documentTo_document", getDocumentTo_document());
        h.put("type", getType());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.lang.Integer localDocumentfrom_document = (java.lang.Integer) h.get("documentfrom_document");
        java.lang.Integer localDocumentTo_document = (java.lang.Integer) h.get("documentTo_document");
        java.lang.String localType = (java.lang.String) h.get("type");

        if ( h.containsKey("documentfrom_document") )
            setDocumentfrom_document((localDocumentfrom_document));
        if ( h.containsKey("documentTo_document") )
            setDocumentTo_document((localDocumentTo_document));
        if ( h.containsKey("type") )
            setType((localType));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getDocumentfromLink());
	links.addElement(getDocumentToLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	documentfromLink = null;
	documentToLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argType java.lang.String
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(java.lang.String argType) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	type = argType;
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argType java.lang.String
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(java.lang.String argType, Integer docFrom, Integer docTo ) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	type = null;
	documentfrom_document = null;
	documentTo_document = null;

	type = argType;
	documentfrom_document = docFrom;
	documentTo_document = docTo;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argType java.lang.String
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(java.lang.String argType) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * This method was generated for supporting the association named DocumentsLink2FirstDocument.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.Document getDocumentfrom() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.Document)this.getDocumentfromLink().value();
}
/**
 * Insert the method's description here.
 * Creation date: (24.04.2002 17:29:43)
 * @return java.lang.Integer
 */
public java.lang.Integer getDocumentfrom_document() {
	return documentfrom_document;
}
/**
 * This method was generated for supporting the association named DocumentsLink2FirstDocument.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.DocumentKey getDocumentfromKey() {
	com.hps.july.persistence.DocumentKey temp = null;
	temp = new com.hps.july.persistence.DocumentKey();
	boolean documentfrom_NULLTEST = true;
	documentfrom_NULLTEST &= (documentfrom_document == null);
	temp.document = ((documentfrom_document == null) ? 0 : documentfrom_document.intValue());
	if (documentfrom_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named DocumentsLink2FirstDocument.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getDocumentfromLink() {
	if (documentfromLink == null)
		documentfromLink = new DocumentsLinkToDocumentfromLink(this);
	return documentfromLink;
}
/**
 * This method was generated for supporting the association named DocumentsLink2DocumentTo.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.Document getDocumentTo() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.Document)this.getDocumentToLink().value();
}
/**
 * Insert the method's description here.
 * Creation date: (24.04.2002 17:29:43)
 * @return java.lang.Integer
 */
public java.lang.Integer getDocumentTo_document() {
	return documentTo_document;
}
/**
 * This method was generated for supporting the association named DocumentsLink2DocumentTo.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.DocumentKey getDocumentToKey() {
	com.hps.july.persistence.DocumentKey temp = null;
	temp = new com.hps.july.persistence.DocumentKey();
	boolean documentTo_NULLTEST = true;
	documentTo_NULLTEST &= (documentTo_document == null);
	temp.document = ((documentTo_document == null) ? 0 : documentTo_document.intValue());
	if (documentTo_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named DocumentsLink2DocumentTo.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getDocumentToLink() {
	if (documentToLink == null)
		documentToLink = new DocumentsLinkToDocumentToLink(this);
	return documentToLink;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * Insert the method's description here.
 * Creation date: (24.04.2002 17:29:43)
 * @return java.lang.String
 */
public java.lang.String getType() {
	return type;
}
/**
 * This method was generated for supporting the association named DocumentsLink2FirstDocument.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetDocumentfromKey(com.hps.july.persistence.DocumentKey inKey) {
	boolean documentfrom_NULLTEST = (inKey == null);
	if (documentfrom_NULLTEST) documentfrom_document = null; else documentfrom_document = (new Integer(inKey.document));
}
/**
 * This method was generated for supporting the association named DocumentsLink2DocumentTo.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetDocumentToKey(com.hps.july.persistence.DocumentKey inKey) {
	boolean documentTo_NULLTEST = (inKey == null);
	if (documentTo_NULLTEST) documentTo_document = null; else documentTo_document = (new Integer(inKey.document));
}
/**
 * This method was generated for supporting the association named DocumentsLink2FirstDocument.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setDocumentfrom(com.hps.july.persistence.Document aDocumentfrom) throws java.rmi.RemoteException {
	this.getDocumentfromLink().set(aDocumentfrom);
}
/**
 * Insert the method's description here.
 * Creation date: (24.04.2002 17:29:43)
 * @param newDocumentfrom_document java.lang.Integer
 */
public void setDocumentfrom_document(java.lang.Integer newDocumentfrom_document) {
	documentfrom_document = newDocumentfrom_document;
}
/**
 * This method was generated for supporting the association named DocumentsLink2DocumentTo.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setDocumentTo(com.hps.july.persistence.Document aDocumentTo) throws java.rmi.RemoteException {
	this.getDocumentToLink().set(aDocumentTo);
}
/**
 * Insert the method's description here.
 * Creation date: (24.04.2002 17:29:43)
 * @param newDocumentTo_document java.lang.Integer
 */
public void setDocumentTo_document(java.lang.Integer newDocumentTo_document) {
	documentTo_document = newDocumentTo_document;
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Insert the method's description here.
 * Creation date: (24.04.2002 17:29:43)
 * @param newType java.lang.String
 */
public void setType(java.lang.String newType) {
	type = newType;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
