package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * ѕозиции журнала изменений (изменени€ полей)
 */
public class ChangeLogDetailsBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	public String fieldlabel;
	public int logdetid;
	public String newvalue;
	public String oldvalue;
	private final static long serialVersionUID = 3206093459760846163L;
	public java.lang.Integer changelog_logid;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink changelogLink = null;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("fieldlabel", getFieldlabel());
        h.put("oldvalue", getOldvalue());
        h.put("changelogKey", getChangelogKey());
        h.put("logdetid", new Integer(getLogdetid()));
        h.put("newvalue", getNewvalue());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.lang.String localFieldlabel = (java.lang.String) h.get("fieldlabel");
        java.lang.String localOldvalue = (java.lang.String) h.get("oldvalue");
        java.lang.String localNewvalue = (java.lang.String) h.get("newvalue");

        if ( h.containsKey("fieldlabel") )
            setFieldlabel((localFieldlabel));
        if ( h.containsKey("oldvalue") )
            setOldvalue((localOldvalue));
        if ( h.containsKey("newvalue") )
            setNewvalue((localNewvalue));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getChangelogLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	changelogLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argLogdetid int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argLogdetid, int argLogid, String argFieldLabel) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.
	logdetid = argLogdetid;
	changelog_logid = new Integer(argLogid);
	fieldlabel = argFieldLabel;
	oldvalue = null;
	newvalue = null;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argLogdetid int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argLogdetid) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * This method was generated for supporting the association named ChangeLogDetails2log.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.ChangeLog getChangelog() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.ChangeLog)this.getChangelogLink().value();
}
/**
 * This method was generated for supporting the association named ChangeLogDetails2log.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.ChangeLogKey getChangelogKey() {
	com.hps.july.persistence.ChangeLogKey temp = null;
	temp = new com.hps.july.persistence.ChangeLogKey();
	boolean changelog_NULLTEST = true;
	changelog_NULLTEST &= (changelog_logid == null);
	temp.logid = ((changelog_logid == null) ? 0 : changelog_logid.intValue());
	if (changelog_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named ChangeLogDetails2log.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getChangelogLink() {
	if (changelogLink == null)
		changelogLink = new ChangeLogDetailsToChangelogLink(this);
	return changelogLink;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * Getter method for fieldlabel
 * @return java.lang.String
 */
public java.lang.String getFieldlabel() {
	return fieldlabel;
}
/**
 * Insert the method's description here.
 * Creation date: (11.03.2003 16:45:51)
 * @return int
 */
public int getLogdetid() {
	return logdetid;
}
/**
 * Getter method for newvalue
 * @return java.lang.String
 */
public java.lang.String getNewvalue() {
	return newvalue;
}
/**
 * Getter method for oldvalue
 * @return java.lang.String
 */
public java.lang.String getOldvalue() {
	return oldvalue;
}
/**
 * This method was generated for supporting the association named ChangeLogDetails2log.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetChangelogKey(com.hps.july.persistence.ChangeLogKey inKey) {
	boolean changelog_NULLTEST = (inKey == null);
	if (changelog_NULLTEST) changelog_logid = null; else changelog_logid = (new Integer(inKey.logid));
}
/**
 * This method was generated for supporting the association named ChangeLogDetails2log.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetChangelog(com.hps.july.persistence.ChangeLog aChangelog) throws java.rmi.RemoteException {
	this.getChangelogLink().secondarySet(aChangelog);
}
/**
 * This method was generated for supporting the association named ChangeLogDetails2log.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setChangelog(com.hps.july.persistence.ChangeLog aChangelog) throws java.rmi.RemoteException {
	this.getChangelogLink().set(aChangelog);
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Setter method for fieldlabel
 * @param newValue java.lang.String
 */
public void setFieldlabel(java.lang.String newValue) {
	this.fieldlabel = newValue;
}
/**
 * Setter method for newvalue
 * @param newValue java.lang.String
 */
public void setNewvalue(java.lang.String newValue) {
	this.newvalue = newValue;
}
/**
 * Setter method for oldvalue
 * @param newValue java.lang.String
 */
public void setOldvalue(java.lang.String newValue) {
	this.oldvalue = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
