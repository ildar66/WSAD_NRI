package com.hps.july.persistence;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 * Фотография
 */
public class PhotoBean implements EntityBean {
	public java.sql.Date date;
	public String description;
	private javax.ejb.EntityContext entityContext = null;
	public int photo;
	private final static long serialVersionUID = 3206093459760846163L;
	public java.lang.Integer position_storageplace;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink positionLink = null;
	public java.lang.Integer photographer_worker;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink photographerLink = null;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("description", getDescription());
        h.put("date", getDate());
        h.put("positionKey", getPositionKey());
        h.put("photo", new Integer(getPhoto()));
        h.put("photographerKey", getPhotographerKey());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.lang.String localDescription = (java.lang.String) h.get("description");
        java.sql.Date localDate = (java.sql.Date) h.get("date");
        Integer localPhoto = (Integer) h.get("photo");

        if ( h.containsKey("description") )
            setDescription((localDescription));
        if ( h.containsKey("date") )
            setDate((localDate));
        if ( h.containsKey("photo") )
            setPhoto((localPhoto).intValue());

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getPositionLink());
	links.addElement(getPhotographerLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	positionLink = null;
	photographerLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argPhoto int
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbCreate(int argPhoto, Integer argPosition, String argDescription, java.sql.Date argDate) throws javax.ejb.CreateException, java.rmi.RemoteException {
	_initLinks();
	// All CMP fields should be initialized here.

	photo = argPhoto;
	position_storageplace = argPosition;
	description = argDescription;
	date = argDate;
	photographer_worker = null;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argPhoto int
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(int argPhoto) throws java.rmi.RemoteException {}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * Getter method for date
 * @return java.sql.Date
 */
public java.sql.Date getDate() {
	return date;
}
/**
 * Getter method for description
 * @return java.lang.String
 */
public java.lang.String getDescription() {
	return description;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * Insert the method's description here.
 * Creation date: (19.04.2002 20:14:14)
 * @return int
 */
public int getPhoto() {
	return photo;
}
/**
 * This method was generated for supporting the association named Photo2Worker.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.Worker getPhotographer() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.Worker)this.getPhotographerLink().value();
}
/**
 * This method was generated for supporting the association named Photo2Worker.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.WorkerKey getPhotographerKey() {
	com.hps.july.persistence.WorkerKey temp = null;
	temp = new com.hps.july.persistence.WorkerKey();
	boolean photographer_NULLTEST = true;
	photographer_NULLTEST &= (photographer_worker == null);
	temp.worker = ((photographer_worker == null) ? 0 : photographer_worker.intValue());
	if (photographer_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named Photo2Worker.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getPhotographerLink() {
	if (photographerLink == null)
		photographerLink = new PhotoToPhotographerLink(this);
	return photographerLink;
}
/**
 * This method was generated for supporting the association named Photo2Position.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.Position getPosition() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return (com.hps.july.persistence.Position)this.getPositionLink().value();
}
/**
 * This method was generated for supporting the association named Photo2Position.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public com.hps.july.persistence.StoragePlaceKey getPositionKey() {
	com.hps.july.persistence.StoragePlaceKey temp = null;
	temp = new com.hps.july.persistence.StoragePlaceKey();
	boolean position_NULLTEST = true;
	position_NULLTEST &= (position_storageplace == null);
	temp.storageplace = ((position_storageplace == null) ? 0 : position_storageplace.intValue());
	if (position_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named Photo2Position.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getPositionLink() {
	if (positionLink == null)
		positionLink = new PhotoToPositionLink(this);
	return positionLink;
}
/**
 * This method was generated for supporting the association named Photo2Worker.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetPhotographerKey(com.hps.july.persistence.WorkerKey inKey) {
	boolean photographer_NULLTEST = (inKey == null);
	if (photographer_NULLTEST) photographer_worker = null; else photographer_worker = (new Integer(inKey.worker));
}
/**
 * This method was generated for supporting the association named Photo2Position.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetPositionKey(com.hps.july.persistence.StoragePlaceKey inKey) {
	boolean position_NULLTEST = (inKey == null);
	if (position_NULLTEST) position_storageplace = null; else position_storageplace = (new Integer(inKey.storageplace));
}
/**
 * This method was generated for supporting the association named Photo2Worker.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetPhotographer(com.hps.july.persistence.Worker aPhotographer) throws java.rmi.RemoteException {
	this.getPhotographerLink().secondarySet(aPhotographer);
}
/**
 * This method was generated for supporting the association named Photo2Position.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetPosition(com.hps.july.persistence.Position aPosition) throws java.rmi.RemoteException {
	this.getPositionLink().secondarySet(aPosition);
}
/**
 * Setter method for date
 * @param newValue java.sql.Date
 */
public void setDate(java.sql.Date newValue) {
	this.date = newValue;
}
/**
 * Setter method for description
 * @param newValue java.lang.String
 */
public void setDescription(java.lang.String newValue) {
	this.description = newValue;
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Insert the method's description here.
 * Creation date: (19.04.2002 20:14:14)
 * @param newPhoto int
 */
public void setPhoto(int newPhoto) {
	photo = newPhoto;
}
/**
 * This method was generated for supporting the association named Photo2Worker.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setPhotographer(com.hps.july.persistence.Worker aPhotographer) throws java.rmi.RemoteException {
	this.getPhotographerLink().set(aPhotographer);
}
/**
 * This method was generated for supporting the association named Photo2Position.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setPosition(com.hps.july.persistence.Position aPosition) throws java.rmi.RemoteException {
	this.getPositionLink().set(aPosition);
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
