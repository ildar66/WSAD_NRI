package com.hps.july.sitedoc.valueobject;

import com.hps.july.trailcom.beans.*;
import javax.naming.NamingException;
import java.rmi.RemoteException;
import javax.ejb.CreateException;
import javax.ejb.FinderException;
import java.util.*;
import com.hps.july.jdbcpersistence.lib.*;
import com.hps.july.persistence.*;

/**
 * Служебный класс-контейнер с параметрами документа
 */
public class SiteDocObject {
	private SiteDocAccessBean bean=new SiteDocAccessBean();
	private java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("dd.MM.yyyy");
/**
 * SiteDocObject constructor comment.
 */
public SiteDocObject() {
	super();
}
/**
 * SiteDocObject constructor comment.
 */
public SiteDocObject(SiteDocAccessBean bean) {
	super();
	this.bean=bean;
	DebugSupport.printlnTest("construct SiteDocObject");
}
private void deleteDocumentFiles()
	throws Exception
{
    Enumeration enum = null;
    try {
        enum = new SiteDocFileAccessBean().findBySitedocsOrderByPKAsc(new Integer(getBean().getSitedoc()));
		while (enum.hasMoreElements()) {
			((SiteDocFileAccessBean) enum.nextElement()).getEJBRef().remove();
			DebugSupport.printlnTest("file was deleted");
		}
	} catch (FinderException e1) {
		DebugSupport.printlnTest("There are no files");
	}
}
public static void deleteDocuments(int storageplace)
	throws Exception
{
    try {
		SiteDocObject siteDoc = null;
		Sitedoc2SplaceAccessBeanTable table = new Sitedoc2SplaceAccessBeanTable();
		table.setSitedoc2SplaceAccessBean(new Sitedoc2SplaceAccessBean().findSitedoc2SplacesByStoragePlace(new StoragePlaceKey(storageplace)));
		if (table.numberOfRows() == 0) {
			throw new FinderException();
		}

        for (int i = 0; i < table.numberOfRows(); i++) {
            siteDoc = new SiteDocObject(table.getSitedoc2SplaceAccessBean(i).getSiteDoc());
            table.getSitedoc2SplaceAccessBean(i).getEJBRef().remove();
            DebugSupport.printlnTest("DELDOC.SP:object link was deleted for storageplace="+storageplace+" and sitedoc="+siteDoc.getBean().getSitedoc());
            if (!siteDoc.hasObjects()) {
                siteDoc.deleteDocumentFiles();
                siteDoc.getBean().getEJBRef().remove();
				DebugSupport.printlnTest("DELDOC.SP:document was deleted for storageplace=" + storageplace);
			} else {
				DebugSupport.printlnTest("DELDOC.SP:document has other object links and can not be deleted");
			}
		}
    } catch (FinderException e) {
        DebugSupport.printlnTest("DELDOC.SP:documents not found for storageplace=" + storageplace);
    }
}
public static void deleteHopsDocuments(HopKey hop)
	throws Exception
{
    try {
        SiteDocObject siteDoc = null;
        Sitedoc2HopsAccessBeanTable table = new Sitedoc2HopsAccessBeanTable();
        table.setSitedoc2HopsAccessBean(new Sitedoc2HopsAccessBean().findSitedoc2HopsByHop(hop));
        if (table.numberOfRows() == 0) {
            throw new FinderException();
        }

        for (int i = 0; i < table.numberOfRows(); i++) {
			int sitedocid = table.getSitedoc2HopsAccessBean(i).getSitedoc();
			
	        SiteDocAccessBean sd = new SiteDocAccessBean();
	        sd.setInitKey_sitedoc(sitedocid);
			sd.refreshCopyHelper();

			siteDoc = new SiteDocObject(sd);
			table.getSitedoc2HopsAccessBean(i).getEJBRef().remove();
			DebugSupport.printlnTest("DELDOC.HOP:object link was deleted for hop="+hop.hopsid+" and sitedoc="+siteDoc.getBean().getSitedoc());
			if (!siteDoc.hasObjects()) {
				siteDoc.deleteDocumentFiles();
				siteDoc.getBean().getEJBRef().remove();
				DebugSupport.printlnTest("DELDOC.HOP:document was deleted for hop="+hop.hopsid);
			} else {
				DebugSupport.printlnTest("DELDOC.HOP:document has other object links and can not be deleted");
			}
		}
	} catch (FinderException e) {
		DebugSupport.printlnTest("DELDOC.HOP:documents not found for hop=" + hop.hopsid);
	}
}
   /**
    * This method was generated by the VisualAge for Java Access Bean SmartGuide.
    * Warning: Modifications will be lost when this part is regenerated.
    */

    public java.util.Enumeration findByEquipment(java.lang.Integer objectId, java.lang.Integer order) throws java.rmi.RemoteException, javax.ejb.FinderException, javax.naming.NamingException {
       
        return bean.findByEquipment(objectId,order);
    }
public Enumeration findByHop(Integer objectId, Integer order)
	throws RemoteException, FinderException, NamingException
{
	return bean.findByHop(objectId,order);
}
public Enumeration findByPosition(Integer objectId, Integer order)
	throws RemoteException, FinderException, NamingException
{
	return bean.findByPosition(objectId,order);
}
public java.util.Enumeration findByProject(java.lang.Integer objectId, java.lang.Integer order)
    throws 
        java.rmi.RemoteException,
        javax.ejb.FinderException,
        javax.naming.NamingException,
        CreateException
{
	return bean.findByProjectactions_Project(objectId);
}
public java.util.Enumeration findByProjectAction(java.lang.Integer objectId, java.lang.Integer order)
    throws
        java.rmi.RemoteException,
        javax.ejb.FinderException,
        javax.naming.NamingException,
        CreateException
{
	return bean.findByProjectaction(objectId);
}
/**
 * Insert the method's description here.
 * Creation date: (26.06.2003 17:26:21)
 * @return com.hps.july.persistence.SiteDocAccessBean
 */
public com.hps.july.persistence.SiteDocAccessBean getBean() {
	return bean;
}
/**
 * Insert the method's description here.
 * Creation date: (05.07.2003 20:31:32)
 * @return java.lang.String
 */
public String getBlankdateStr() throws Exception{
 if (getBean().getBlankdate() == null)
        return "";   
	
	return dateFormat.format(getBean().getBlankdate());
}
/**
 * Insert the method's description here.
 * Creation date: (05.07.2003 20:31:32)
 * @return java.lang.String
 */
public String getExpiredateStr() throws Exception {
    if (getBean().getExpiredate() == null)
        return "";
    return dateFormat.format(getBean().getExpiredate());

}
/**
 * Insert the method's description here.
 * Creation date: (26.06.2003 17:27:22)
 * @return boolean
 */
public boolean hasFiles() throws Exception{
    Enumeration enum;
    try {
        enum = getBean().getSiteDocFiles();
    } catch (FinderException fe) {
        return false;
    } catch (Exception e) {
        DebugSupport.printlnError(e);
        throw e;
    }
    return enum != null && enum.hasMoreElements();

    
}
public boolean hasObjects()
	throws Exception
{
	boolean result = false;
    try {
		int sitedoc = getBean().getSitedoc();

		Sitedoc2SplaceAccessBeanTable table = new Sitedoc2SplaceAccessBeanTable();
		table.setSitedoc2SplaceAccessBean(new Sitedoc2SplaceAccessBean().findSitedoc2SplacesBySiteDoc(new SiteDocKey(sitedoc)));
		if(table.numberOfRows() != 0) {
			result = true;
		}

        Sitedoc2HopsAccessBeanTable htable = new Sitedoc2HopsAccessBeanTable();
        htable.setSitedoc2HopsAccessBean(new Sitedoc2HopsAccessBean().findSitedoc2HopsBySitedoc(new Integer(sitedoc)));
		if(htable.numberOfRows() != 0) {
			result = true;
		}
    } catch (FinderException e) {
	    System.out.println("SiteDocObject.hasObjects: FinderException");
    }
    System.out.println("SiteDocObject.hasObjects: result:"+result);
	return result;
}
}
