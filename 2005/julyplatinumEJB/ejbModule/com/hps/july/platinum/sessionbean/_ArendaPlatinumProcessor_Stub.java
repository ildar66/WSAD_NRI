// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.hps.july.platinum.sessionbean;

import java.io.Serializable;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import java.sql.Date;
import java.sql.Timestamp;
import javax.ejb.CreateException;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.naming.NamingException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ServantObject;

public class _ArendaPlatinumProcessor_Stub extends Stub implements ArendaPlatinumProcessor {
    
    private static final String[] _type_ids = {
        "RMI:com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000"
    };
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public EJBHome getEJBHome() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_EJBHome", true);
                    in = _invoke(out);
                    return (EJBHome) in.read_Object(EJBHome.class);
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getEJBHome();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_EJBHome",javax.ejb.EJBObject.class);
            if (so == null) {
                return getEJBHome();
            }
            try {
                EJBHome result = ((javax.ejb.EJBObject)so.servant).getEJBHome();
                return (EJBHome)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Handle getHandle() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_handle", true);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Handle) in.read_abstract_interface(Handle.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getHandle();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_handle",javax.ejb.EJBObject.class);
            if (so == null) {
                return getHandle();
            }
            try {
                Handle result = ((javax.ejb.EJBObject)so.servant).getHandle();
                return (Handle)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object getPrimaryKey() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_primaryKey", true);
                    in = _invoke(out);
                    return Util.readAny(in);
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getPrimaryKey();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_primaryKey",javax.ejb.EJBObject.class);
            if (so == null) {
                return getPrimaryKey();
            }
            try {
                Object result = ((javax.ejb.EJBObject)so.servant).getPrimaryKey();
                return (Object)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean isIdentical(EJBObject arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("isIdentical", true);
                    Util.writeRemoteObject(out,arg0);
                    in = _invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return isIdentical(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("isIdentical",javax.ejb.EJBObject.class);
            if (so == null) {
                return isIdentical(arg0);
            }
            try {
                EJBObject arg0Copy = (EJBObject) Util.copyObject(arg0,_orb());
                return ((javax.ejb.EJBObject)so.servant).isIdentical(arg0Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void remove() throws RemoteException, RemoveException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("remove", true);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:javax/ejb/RemoveEx:1.0")) {
                        throw (RemoveException) in.read_value(RemoveException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    remove();
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("remove",javax.ejb.EJBObject.class);
            if (so == null) {
                remove();
                return;
            }
            try {
                ((javax.ejb.EJBObject)so.servant).remove();
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof RemoveException) {
                    throw (RemoveException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean isProcessingEnabled() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_processingEnabled", true);
                    in = _invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return isProcessingEnabled();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_processingEnabled",com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor.class);
            if (so == null) {
                return isProcessingEnabled();
            }
            try {
                return ((com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor)so.servant).isProcessingEnabled();
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public int makeQryGetBanks(int arg0, Integer arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("makeQryGetBanks", true);
                    out.write_long(arg0);
                    out.write_value(arg1,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_long();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return makeQryGetBanks(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("makeQryGetBanks",com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor.class);
            if (so == null) {
                return makeQryGetBanks(arg0, arg1);
            }
            try {
                Integer arg1Copy = (Integer) Util.copyObject(arg1,_orb());
                return ((com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor)so.servant).makeQryGetBanks(arg0, arg1Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public int makeQryGetPays(int arg0, Integer arg1, Integer arg2, Date arg3, Date arg4) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("makeQryGetPays", true);
                    out.write_long(arg0);
                    out.write_value(arg1,Integer.class);
                    out.write_value(arg2,Integer.class);
                    out.write_value(arg3,Date.class);
                    out.write_value(arg4,Date.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_long();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return makeQryGetPays(arg0,arg1,arg2,arg3,arg4);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("makeQryGetPays",com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor.class);
            if (so == null) {
                return makeQryGetPays(arg0, arg1, arg2, arg3, arg4);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg1,arg2,arg3,arg4},_orb());
                Integer arg1Copy = (Integer) copies[0];
                Integer arg2Copy = (Integer) copies[1];
                Date arg3Copy = (Date) copies[2];
                Date arg4Copy = (Date) copies[3];
                return ((com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor)so.servant).makeQryGetPays(arg0, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public int makeQryGetSprArenda(int arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("makeQryGetSprArenda", true);
                    out.write_long(arg0);
                    in = _invoke(out);
                    return in.read_long();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return makeQryGetSprArenda(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("makeQryGetSprArenda",com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor.class);
            if (so == null) {
                return makeQryGetSprArenda(arg0);
            }
            try {
                return ((com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor)so.servant).makeQryGetSprArenda(arg0);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void makeQueryGetBanks(Integer arg0, Integer arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("makeQueryGetBanks", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Integer.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    makeQueryGetBanks(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("makeQueryGetBanks",com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor.class);
            if (so == null) {
                makeQueryGetBanks(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Integer arg1Copy = (Integer) copies[1];
                ((com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor)so.servant).makeQueryGetBanks(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void makeQueryGetPaymentsFromPlatinum(Timestamp arg0, Integer arg1, Integer arg2) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("makeQueryGetPaymentsFromPlatinum", true);
                    out.write_value(arg0,Timestamp.class);
                    out.write_value(arg1,Integer.class);
                    out.write_value(arg2,Integer.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    makeQueryGetPaymentsFromPlatinum(arg0,arg1,arg2);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("makeQueryGetPaymentsFromPlatinum",com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor.class);
            if (so == null) {
                makeQueryGetPaymentsFromPlatinum(arg0, arg1, arg2);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                Timestamp arg0Copy = (Timestamp) copies[0];
                Integer arg1Copy = (Integer) copies[1];
                Integer arg2Copy = (Integer) copies[2];
                ((com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor)so.servant).makeQueryGetPaymentsFromPlatinum(arg0Copy, arg1Copy, arg2Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void makeQueryGetSimpleSprav(Integer arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("makeQueryGetSimpleSprav", true);
                    out.write_value(arg0,Integer.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    makeQueryGetSimpleSprav(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("makeQueryGetSimpleSprav",com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor.class);
            if (so == null) {
                makeQueryGetSimpleSprav(arg0);
                return;
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                ((com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor)so.servant).makeQueryGetSimpleSprav(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void makeQueryMoveAccountInPlatinum(String arg0, Integer arg1, Integer arg2) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("makeQueryMoveAccountInPlatinum", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,Integer.class);
                    out.write_value(arg2,Integer.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    makeQueryMoveAccountInPlatinum(arg0,arg1,arg2);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("makeQueryMoveAccountInPlatinum",com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor.class);
            if (so == null) {
                makeQueryMoveAccountInPlatinum(arg0, arg1, arg2);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                String arg0Copy = (String) copies[0];
                Integer arg1Copy = (Integer) copies[1];
                Integer arg2Copy = (Integer) copies[2];
                ((com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor)so.servant).makeQueryMoveAccountInPlatinum(arg0Copy, arg1Copy, arg2Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void makeQueryMovePartnerInPlatinum(String arg0, Integer arg1, Integer arg2) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("makeQueryMovePartnerInPlatinum", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,Integer.class);
                    out.write_value(arg2,Integer.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    makeQueryMovePartnerInPlatinum(arg0,arg1,arg2);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("makeQueryMovePartnerInPlatinum",com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor.class);
            if (so == null) {
                makeQueryMovePartnerInPlatinum(arg0, arg1, arg2);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                String arg0Copy = (String) copies[0];
                Integer arg1Copy = (Integer) copies[1];
                Integer arg2Copy = (Integer) copies[2];
                ((com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor)so.servant).makeQueryMovePartnerInPlatinum(arg0Copy, arg1Copy, arg2Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void moveAllPaymentsPlatinum2Nri(int arg0) throws RemoteException, Exception {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("moveAllPaymentsPlatinum2Nri", true);
                    out.write_long(arg0);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:java/lang/Ex:1.0")) {
                        throw (Exception) in.read_value(Exception.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    moveAllPaymentsPlatinum2Nri(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("moveAllPaymentsPlatinum2Nri",com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor.class);
            if (so == null) {
                moveAllPaymentsPlatinum2Nri(arg0);
                return;
            }
            try {
                ((com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor)so.servant).moveAllPaymentsPlatinum2Nri(arg0);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof Exception) {
                    throw (Exception)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void moveBanksPlatinumToNri(int arg0) throws RemoteException, Exception {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("moveBanksPlatinumToNri", true);
                    out.write_long(arg0);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:java/lang/Ex:1.0")) {
                        throw (Exception) in.read_value(Exception.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    moveBanksPlatinumToNri(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("moveBanksPlatinumToNri",com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor.class);
            if (so == null) {
                moveBanksPlatinumToNri(arg0);
                return;
            }
            try {
                ((com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor)so.servant).moveBanksPlatinumToNri(arg0);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof Exception) {
                    throw (Exception)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void moveDogovorNriToPlatinum(int arg0, Integer arg1, String arg2, String arg3) throws NamingException, CreateException, RemoteException, Exception {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("moveDogovorNriToPlatinum", true);
                    out.write_long(arg0);
                    out.write_value(arg1,Integer.class);
                    out.write_value(arg2,String.class);
                    out.write_value(arg3,String.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:javax/naming/NamingEx:1.0")) {
                        throw (NamingException) in.read_value(NamingException.class);
                    }
                    if (id.equals("IDL:javax/ejb/CreateEx:1.0")) {
                        throw (CreateException) in.read_value(CreateException.class);
                    }
                    if (id.equals("IDL:java/lang/Ex:1.0")) {
                        throw (Exception) in.read_value(Exception.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    moveDogovorNriToPlatinum(arg0,arg1,arg2,arg3);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("moveDogovorNriToPlatinum",com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor.class);
            if (so == null) {
                moveDogovorNriToPlatinum(arg0, arg1, arg2, arg3);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg1,arg2,arg3},_orb());
                Integer arg1Copy = (Integer) copies[0];
                String arg2Copy = (String) copies[1];
                String arg3Copy = (String) copies[2];
                ((com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor)so.servant).moveDogovorNriToPlatinum(arg0, arg1Copy, arg2Copy, arg3Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NamingException) {
                    throw (NamingException)exCopy;
                }
                if (exCopy instanceof CreateException) {
                    throw (CreateException)exCopy;
                }
                if (exCopy instanceof Exception) {
                    throw (Exception)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void movePaymentNriToPlatinum(int arg0, String arg1, Integer arg2, String arg3, String arg4) throws RemoteException, Exception {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("movePaymentNriToPlatinum", true);
                    out.write_long(arg0);
                    out.write_value(arg1,String.class);
                    out.write_value(arg2,Integer.class);
                    out.write_value(arg3,String.class);
                    out.write_value(arg4,String.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:java/lang/Ex:1.0")) {
                        throw (Exception) in.read_value(Exception.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    movePaymentNriToPlatinum(arg0,arg1,arg2,arg3,arg4);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("movePaymentNriToPlatinum",com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor.class);
            if (so == null) {
                movePaymentNriToPlatinum(arg0, arg1, arg2, arg3, arg4);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg1,arg2,arg3,arg4},_orb());
                String arg1Copy = (String) copies[0];
                Integer arg2Copy = (Integer) copies[1];
                String arg3Copy = (String) copies[2];
                String arg4Copy = (String) copies[3];
                ((com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor)so.servant).movePaymentNriToPlatinum(arg0, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof Exception) {
                    throw (Exception)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void test(int arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("test", true);
                    out.write_long(arg0);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    test(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("test",com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor.class);
            if (so == null) {
                test(arg0);
                return;
            }
            try {
                ((com.hps.july.platinum.sessionbean.ArendaPlatinumProcessor)so.servant).test(arg0);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
}
